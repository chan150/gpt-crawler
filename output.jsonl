[
  {
    "title": "Block Types in Builder - Builder.io",
    "url": "https://www.builder.io/c/docs/block-types#code",
    "html": "Block Types in Builder\n\nBlocks are the drag-and-drop building blocks that give your project structure. Blocks contain and format the content inside them.\n\nText block\n\nThe Text Block, like all the blocks, is available in the Insert tab. Drag it onto your page and enter your text.\n\nIn the Text dialogue, you can set styles such as the level of heading, or normal text, bold, italic, highlighting, lists, and background color.\n\nWith a Text block selected, you can go to the Style tab to specify styles such as the font family, weight, size, color, alignment, line height, and more.\n\nThis short video shows how to use the Text Block.\n\nEditing text inline\n\nIn addition to using the Text dialogue to edit text, you can optionally use Inline text editing to edit text directly on the Page without having to open a dialogue.\n\nWhen you toggle Inline text editing on or off, the setting applies to all Text blocks.\n\nIn the Text dialogue—accessed by double clicking the Text block or by going to the Options tab—set the Inline text editing toggle to the on position.\nClick on a Text block to edit and edit as usual.\nTo toggle off Inline text editing, select a Text block, go to the Options tab, and toggle the Inline text editing to the off position.\n\nThe next video shows using Inline text editing.\n\nUsing the slash command for faster editing\n\nWith the slash, /, command, you can quickly pull up the most in-demand features of the Visual Editor. To use the slash command, you must be using Inline editing.\n\nOptions available include adding:\n\nAdd blocks, including:\n\nText\nImage\nVideo\nColumns\nSections\nForms and form elements\nCustom code\n\nFormatting text such as:\n\nHeadings (h1, h2, and h3)\nOrdered lists\nUnordered lists\nBold\nItalics\nUnderline\n\nTip: When using the slash command to add another element within a Text block, the existing Text block splits into two. This can be helpful for quickly breaking up large blocks of copy.\n\nTo use the slash command:\n\nWhile inline editing a text block, press Enter to start a new line.\nWhen the new line starts, the Text block displays a prompt that reads Type '/' for commands.\nPress the slash, /, key.\nSelect the option you'd like from the list.\n\nThe next video shows a few examples of using the slash command to add structure and elements in the Visual Editor.\n\nThe Image block\n\nThe Image block, available from the Insert tab, manages your image's responsiveness, size, and performance for you.\n\nYou drag the Image block onto the work area and add an image to it by uploading your image.\n\nUsing the Style tab, you can set properties on the image, such as margins, padding, min- and max-width and height, as well as whether the image fills the container.\n\nYou can turn your image into a banner by constraining the height, and you can add text over the image.\n\nTip: When you use the Builder Image block, you're assured of the best performance and optimization for your images. It is recommended that you always use the Image block around your images and not place them into your page using another method. For more information, check out Working with Images.\n\nThis short video shows how to use the Image block.\n\nThe Columns block\n\nTo use the Columns block, drag it from the Insert tab onto your page. Once you drop onto your page, the Edit menu lets you add and remove columns.\n\nIf you drag another type of element into the column area, such as placing an image between two columns, the image will become a column and inherit all the properties and responsiveness of the other columns.\n\nYou can change the spacing between and around the columns by dragging the small dot at the edge of a column. When you do, the columns will all adopt that equal space between each of them. Dragging the vertical lines changes the width of the column.\n\nYou can check the mobile layout from the top bar to see that your columns adapt properly to the smaller screen sizes.\n\nThe following video shows the operations you can perform on columns.\n\nThe Box block\n\nThe Box block, available on the Insert tab, is the most minimal building block in Builder. The Box block gives you a container to put other blocks within, such as text and images.\n\nBox blocks can have background colors to set them apart, shadows, borders, border radius settings, margins, padding, and all the properties an element can have in CSS.\n\nBy default, the Box block is constrained in width by its parent, such as another box or the page. If you'd like its width to be unconstrained and fill the whole width of the viewport, use a Section block instead.\n\nThis video shows what you can do with a Box block.\n\nThe Embed block\n\nThe Embed block gives you a place to embed into your pages videos and other assets you find on the web, such as Instagram posts.\n\nFind the Embed block on the Insert tab. Just drag it onto your page and add the URL in the Edit menu.\n\nThis video demonstrates the process with a YouTube video and an Instagram post.\n\nThe Button block\n\nThe Button block lets you create and style a button that you can use to link to another page. To use it, drag it onto your page from the Insert tab.\n\nYou can style the button in the Style tab and change styles such as the size, color, and font.\n\nYou can also set a trigger so that the color or other properties of the button change when the user hovers over it. That behavior is available in the Animate tab.\n\nIf you want to try out the Button animation, check out this video. While you may not want to make the button label bigger on hover, this shows how you can.\n\nThe Section block\n\nThe Section block, available on the Insert tab, is useful when you want part of your page to fill the width of the viewport, even beyond the width of the rest of your page.\n\nYou can style Section blocks just like any other block. Sections are ideal for containing Columns, Text, image, and Box blocks.\n\nThe following video demonstrates the use of the Section block.\n\nThe Custom Code block\n\nUse the Custom Code block when you have code to paste from anther site. For example, YouTube provides both a URL and embed code. The YouTube embed code gives you more options than the plain URL, such as where to start the replay and whether or not to show the video controls. Because these parameters are not in the YouTube URL, you can't use the Embed block's URL feature to set them. Instead, use the Custom Code block to include all those parameters.\n\nTip: Use Custom Code Blocks to add HTML to your content. If you need access to state and other Builder-provided global variables you can instead use custom JavaScript as outlined in the Custom Code documentation.\n\nThis video shows the usage of the Custom Code block.\n\nTemplates\n\nTemplates are useful when you want to have a styled piece of content to use many places, but want to be able to change the content or make minor edits to styles.\n\nA good example is our Tip template. It has the pointing finger and the styling, but we change the text depending on the tip we want to convey.\n\nYou'll note that this is similar to Symbols below, but Symbols have exactly the same content wherever they are used.\n\nTemplates are available further down on the Insert menu in the Templates section.\n\nYou can create your own Templates by selecting a group of content and choosing Save as Template.\n\nFor more information on Reusable Blocks, of which Templates are one type, refer to Reusing Blocks.\n\nThe following video shows the use of two Templates.\n\nSymbols\n\nSymbols, also found further down on the Insert menu under the Symbols tab, are very similar to Templates.\n\nSymbols are also reusable pieces of content, but their content does not change based on where they are used. You can change a Symbol after it's created, but that change will be reflected everywhere that Symbol is used.\n\nFor more information on Reusable Blocks, of which Symbols are one type, refer to Reusing Blocks.\n\nThis video demonstrates the use of a Symbol.\n\nFor more information on building with blocks check out Getting Started with the Visual Editor."
  },
  {
    "title": "Registering Custom Components - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-components-setup?_host=www.builder.io",
    "html": "Registering Custom Components\n\nWant a shortcut? Get going right away with Builder's Devtools, where you can register components with the flip of a switch. For details, visit Using Builder Devtools for Automated Integration.\n\nTo use your custom components in the Builder Visual Editor, you need to take a couple of minimal steps in your codebase.\n\nPrerequisites\n\nTo get the most our of this tutorial, you should have the following:\n\nIntegrated Pages or Sections\nThe Builder SDK installed for your framework\n\nTip: This tutorial is for custom components in all Builder's supported frameworks except for the HTML API.\n\nExample\n\nBuilder can register any of your components for use in the Visual Editor. Just provide a reference to the component and describe the inputs—or the props—that you would like to be editable in the Visual Editor as in the following example:\n\ntype MyProps = { content: string; link: string }\n\n// Any component in your codebase\nfunction MyButton(props: MyProps) {\n  return <Button href={props.link}>{props.content}</Button>\n}\n\n// Register this component for use in the Visual Editor\nBuilder.registerComponent(MyButton,{\n  name: 'MyButton',\n  inputs: [\n    // 'name' is the name of your prop\n    { name: 'content', type: 'text' },\n    { name: 'link', type: 'url' },\n  ],\n)\n\nSetting up your code\n\nTo use your custom component with Builder, you need to let Builder know about it by registering your component. Registering your component makes the component appear in the Visual Editor as a custom block. Follow the steps according to framework.\n\nNext\nQwik\nSwift\nReact\nVue\nSvelte\nAngular\n\nTip: Currently, Builder supports registering client components. Server component support is in development. Subscribe to the Builder newsletter for the latest in feature development.\n\nDefining a component\n\nYou can use a component you already have or create a component that you want to register with Builder. This example uses a Heading component that displays a title prop.\n\nconst Heading = props => (\n  <h1>{props.title}</h1>\n)\n\nRegistering your component\n\nRegister your component as in the following example. Here, registerComponent() registers a Heading component with one text input: title\n\nMake sure that you import the file where Builder.registerComponent() resides into any file that has a BuilderComponent. This import is vital to the setup.\n\nimport { Builder } from '@builder.io/react'\n\n// Make sure that every page where renders Builder \n// content calls the file containing this function call\nBuilder.registerComponent(Heading, { \n  name: 'Heading',\n  inputs: [{ name: 'title', type: 'text' }],\n  image: 'https://tabler-icons.io/static/tabler-icons/icons-png/3d-cube-sphere-off.png'\n})\n\n\nThe registerComponent(component, options) method takes two arguments:\n\ncomponent: such as Heading in the following example\noptions: an object with which you can specify property values such as children, requirements, and inputs\n\nThe options you provide to registerComponent() determine how your component appears in the Visual Editor. For example, with the image option, you can provide your own icon that the Visual Editor uses in the Insert tab. For a list of additional options, refer to Input types.\n\nAs a best practice, always specify an image to use as an icon in the Visual Editor. This example uses an icon from Tabler Icons.\n\nAfter registering your component with Builder, you can use it as in this example where an h1 uses title from the custom component, Heading.\n\nTip: If you have a prop you'd like to make editable in the Visual Editor, be sure to define an input for it. In this example, name is editable because it is specified in the inputs array of registerComponent().\n\nCheck out the full reference docs for registerComponent() options for more details.\n\nUsing your component in Builder's Visual Editor\n\nNow your component should show up in the Visual Editor with no further configuration in the code.\n\nThe following video shows the Custom Thing block in the Custom Components section of the Insert tab.\n\nCustomThing has an input registered with Builder called name. To use a registered component's input, do the following:\n\nDrag and drop your custom component into the work area.\nSelect your component by clicking on it.\nClick the Edit button.\nAdd a value for the the input, in this example, the input is called name, and the value added is the text, \"Sunshine\".\nSetting component options\n\nThe following table describes each of the additional component options:\n\nName\tType\tDescription\n\ndefaultStyles\n\n\t\n\nobject\n\n\t\n\nUse for showing an example value in the input form when creating a new instance of this component, to users understand its purpose. Users in the Visual Editor can edit these styles.\n\n\n\n\nhideFromInsertMenu\n\n\t\n\nBoolean\n\n\t\n\nHide your component from the Insert tab within Builder's Visual Editor. Use this feature for deprecating a component when you want to reduce its use, but still need the component registered with Builder so that older content that uses the component continues to function properly. For more information on versioning, refer to Versioning Custom Components.\n\nhideFromInsertMenu: true\n\n\n\nnoWrap\n\n\t\n\nBoolean\n\n\t\n\nBy default, Builder wraps your components in a <div>.\n\nYou can opt out of this wrapping by using the noWrap option. For a full code example, see Builder's built-in form input component.\n\nThe following example shows noWrap with a Material UI TextField in Builder.io.\n\nTip: When using noWrap: true, it is important to pass {...props.attributes} to ensure class names are assigned correctly as in the following example.\n\nimport { TextField } from '@material-ui/core'\n\nexport const BuilderTextField = props => (\n  // Important! Builder.io must add a couple classes \n  // and attributes via props.attributes\n  // Important! If you add your own classes, \n  // do it after ...props.attributes \n  <TextField \n    variant={props.variant} \n    {...props.attributes} \n    className={`my-class ${props.attributes.className}`}\n   />\n)\n\nBuilder.registerComponent(BuilderTextField, {\n  name: 'TextField',\n  noWrap: true, // Important!\n  inputs: [{ name: 'variant', type: 'string' }]\n})\n\nProgrammatically setting bindings\n\nYou can programmatically set bindings on custom components so you can apply multiple bindings simultaneously. This is helpful when, for example, applying styles from an existing design system. The snippet below registers a custom component with default bindings for the product title and a theme background color:\n\nFetching data async\n\nUnless you're using a React-based framework, your components can fetch data async out-of-the-box.\n\nIf you are using a React-based framework and want your component to fetch data async, use Builder's getAsyncProps helper.\n\nIn the following example, the page loads after the all the data arrives:\n\nFor more information about getAsyncProps see the Builder Utils README on GitHub.\n\nMaking a component available only in specified models\n\nWhen you use Builder.registerComponent() to register custom components in Builder.io, you can provide various options to customize the behavior of your component.\n\nOne of these options is the models property, where you can specify a list of model names. By doing so, you can restrict the usage of the component to only those models listed, ensuring that the component is available only for specific purposes. If the models property is not provided, the component will be available for all models in Builder.io.\n\nTo control exactly which models your component is available in, use the models array when registering your component as in the following example:\n\nIn this example, the RelatedProducts component is only accessible in the Visual Editor when editing content entries made with the product-editorial or page models.\n\nWhat's next\n\nTo learn how to test and customize how your component appears in the Visual Editor, continue on to Using Your Custom Components in the Visual Editor.\n\nTo limit visual editing to only your custom components, use Components-only mode."
  },
  {
    "title": "Building Interactivity Using State and Actions - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/state-and-actions",
    "html": "Building Interactivity Using State and Actions\n\nLearn how to make your Builder content interactive with state and actions in this 5 minute video.\n\nState is a JavaScript concept that simply says an object is in a certain state, and you can update its properties and its behavior will change accordingly. State and actions make your content interactive. Below, we will show you a simple way to use state and actions.\n\nUsing state and actions\n\nStart by dragging and dropping in a template. Add two buttons below the template. One button will make the content disappear, and the other will make the content reappear.\n\nOnce we have our buttons in place, we are going to use the State object. Click on the reappear button, navigate to the “Data” tab, and click “new action” in the element actions section. Set the action to “click”, and then click “edit action”. This is where we will use a bit of JavaScript. Enter in state.hidden=false; If you’re familiar with JavaScript, you know we can add any property name on the State object. If you aren’t familiar, all you need to know is we are setting State to hidden, and then equaling it to false (while means no). For our other button, we are going to follow the same steps, but state will be set to true: state.hidden=true;\n\nNow you can click on the buttons and see our function working. On the left side of the editor, you can see hidden being toggled on and off when our buttons are clicked. Lastly, we need to bind our hidden property to our content so we can visually see our content disappear/reappear. Click on the content that you want to apply the hidden property to. At the top of the “Data” tab in the binding section, click \"get\" and select “hide if”. Then, click “from” and select “hidden”.\n\nTo learn more about how to add custom code to state bindings or action handlers, check out our Custom Code guide."
  },
  {
    "title": "Saving layers as templates in Builder.io - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/templates",
    "html": "Creating Templates\n\nLike a cookie cutter, a Template is a design that you can reuse as needed. An example might be a section with the same basic layout that you can use on multiple pages.\n\nEach time you use the Template, you might change content such as the copy, images, or color, just like changing the decoration on cookies made with the same cutter.\n\nTip: Though the template is a starting point for an element, you can edit each instance as needed without affecting the original Template or other instances of the Template.\n\nTo create reusable elements that are controlled by the original instance, read Intro to Symbols.\n\nPrerequisites\n\nTo get the most out of making your own Templates, make sure you're acquainted with:\n\nTypes of Reusable Blocks\nMaking a Template\n\nTo create your own Template:\n\nSelect the element you want to turn into a Template.\nWith the element selected, click the down arrow on the selection outline.\nSelect Save as Template.\nName your Template. If you're on an Enterprise plan, you can choose to make your Template available across all your Spaces.\nClick the OK button.\nEditing a Template\n\nYou can edit a template in a number of ways:\n\nChange the Template name\nPut the Template in a folder\nPrioritize how the Template shows up among other templates\nGive it a screenshot that displays in the Visual Editor as a thumbnail\nRestrict its use to the current Space\nDelete the Template\n\nTo edit an existing template:\n\nGo to the Insert tab.\nExpand the My Templates section.\nHover over the upper right corner of the template you'd like to edit and click the Pencil icon that appears.\nEdit the Template as needed.\n\nThe following video demonstrates opening the edit dialogue for a template, changing its name, putting it in a folder, and uploading a screenshot that will serve as the Template thumbnail:\n\nUsing your Template\n\nTo use a Template, you've created:\n\nGo to the Insert tab.\nExpand the My Templates section.\nDrag and drop your Template onto the page.\nEdit the template as needed.\n\nAny edits you make to the template only apply to this instance of the Template and do not impact other instances of the same Template or the original Template.\n\nThe next video shows this process along with edits to the copy, background color, and image.\n\nWhat's next"
  },
  {
    "title": "Creating a Private Model - Builder.io",
    "url": "https://www.builder.io/c/docs/private-models?_host=www.builder.io",
    "html": "Creating a Private Model\n\nWhen you need a model that is only privately accessible, you can adjust the configuration of your model, use a Private API Key, as well as the Content API to ensure privacy.\n\nMaking a model private\n\nBy default, Builder Page, Section, and Data models are publicly readable.\n\nTip: When setting a model to be private, consider whether you want all entries of that model to be private. If some of them need to be publicly readable, create a model specifically for private content entries.\n\nTo make a model private:\n\nGo to Models.\nOpen your page model.\nGo to Advanced.\nSwitch the Public Readable toggle to off.\nClick Save.\nCreate content entries from this model for any that you'd like to be private.\n\nThe following video shows how to toggle off the Public Readable setting for a Page model, but you can change this setting on any kind of model.\n\nCreating a Private API Key\n\nTo leverage a private model, you need to create a Private API Key in your Organization Settings. Follow the instructions in the Managing Private Keys section of the API Keys documentation.\n\nWhen you have your Private API Key, continue with the instructions below.\n\nAdding the code\n\nUse the Content API with your Private API key with the following code, where you replace these values with your own:\n\nmodelName\nyourPublicAPIKey\nyourPrivateAPIKey\nlet apiUrl = 'https://cdn.builder.io/api/v2/content'\nlet modelName = 'private-page'\nlet content = await request(`${apiUrl}/${modelName}?apiKey=${yourPublicAPIKey}&limit=1&userAttributes.urlPath=/some-page`, {\n  headers: { Authorization: `Bearer ${yourPrivateAPIKey}` },\n})\n\n\nNext, pass the JSON to render as needed; for example as in this React snippet for a model named private-page:\n\nlet page = content.results[0];\n\nif (page) {\n  return <BuilderComponent model=\"private-page\" content={page} />\n}\n\nWhat's next\n\nModels are a foundational part of Builder that you can customize to countless use cases. For more information on what you can do with models, refer to the following documentation:\n\nUsing Custom Fields: You can edit or create many kinds of custom fields on models with a variety of types.\nTargeting and Scheduling: Get the right content to the right people at the right time."
  },
  {
    "title": "Content API - Builder.io",
    "url": "https://www.builder.io/c/docs/content-api?_host=www.builder.io",
    "html": "Content API\n\nWith the Content API, you can make requests to retrieve data about any of your models within Builder. The Content API supports advanced query filtering with URL parameters to help you get exactly the data you need.\n\nUse cases for querying data could include searches, populating content for a collection, or getting all links that meet certain criteria.\n\nTo access this data, write queries with dot notation and, optionally, MongoDB style operators.\n\nFor more details on querying, see the Querying Cheatsheet.\n\nSet up\n\nTo start using the Content API, make sure to import the Builder SDK into your project.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\n\nAt the command line, use npm to install the Builder SDK:\n\nnpm install @builder.io/react\n\nIn your code, be sure to import the SDK:\n\nimport { builder } from \"@builder.io/react\";\nQuery requirements\n\nTo use the Builder Content API to retrieve data from your models, be sure to always provide the following request parameters in your queries:\n\nRequired: my-model-name (replace with your model's name)\nRequired: apiKey query param (replace with your Public API Key)\n\nAs an example, you'd replace my-model-name with the name of your model, such as page, and YOUR_API_KEY with your own Public API Key.\n\nhttps://cdn.builder.io/api/v3/my-model-name?apiKey=YOUR_API_KEY\nContent API query params\n\nThis section covers the available Builder Content API query params.\n\napiKey\n\nUse your API key when integrating with Builder.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\nbuilder.init(YOUR_API_KEY);\n\nquery\n\nMongoDB style query of your data.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from '@builder.io/react'\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  query: {\n    id: 'abc123',\n    data: {\n      myCustomField: 'someValue',\n      someNumber: { $ne: 2 }\n    }\n  }\n}\n\n// to get all entries from a page model that are using a specific symbol\n// where SYMBOL_ID is your Symbol's ID\nconst entry = await builder.get('page', {\n  query: {\n    'meta.symbolsUsed.SYMBOL_ID': true\n  }\n});\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  query: {\n    id: 'abc123',\n    data: {\n      myCustomField: 'someValue',\n      someNumber: { $ne: 2 }\n    }\n  }\n})\n\n// get all the entries from a page model that are using a specific symbol \n// where SYMBOL_ID is your Symbol's ID\nconst entry = await fetchOneEntry({\n  model: 'page',\n  query: {\n    'meta.symbolsUsed.SYMBOL_ID': true\n  }\n})\n\n\nBuilder supports the following operators: $eq $gt $in $lt $lte $ne $nin $and $not $or $nor $exists $type $elemMatch $gte $regex $options. For more information, including examples, see the Builder Querying Cheatsheet.\n\nuserAttributes\n\nOptionally use to send targeting attributes.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  userAttributes: {\n    urlPath: '/about',\n    device: 'desktop',\n    userLoggedIn: true\n  },\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  userAttributes: {\n    urlPath: '/about',\n    device: 'desktop',\n    userLoggedIn: true\n  },\n})\n\nfields\n\nOnly include these fields.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  fields: 'id, name, data.customField'\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  options: {\n    fields: 'id, name, data.customField'\n  }\n})\n\nomit\n\nOmit only these fields.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  omit: 'data, bigField, data.blocks'\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  options: {\n    omit: 'data, bigField, data.blocks'\n  }\n})\n\nlimit\n\nMax number of results to return. The default is 30 and the maximum is 100.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entries = await builder.getAll('my-model-name', {\n  limit: 10\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchEntries } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entries = await fetchEntries({\n  model: 'my-model-name',\n  limit: 10\n})\n\noffset\n\nUse to specify an offset for pagination of results. The default is 0.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  offset: 10\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  offset: 10\n})\n\n\nTo fetch all content beyond the limit of 100, use limit and offset together by paginating results and making multiple API calls as follows:\n\nconst limit = 100;\nlet offset = 0;\nconst pages = await getResults({limit, offset});\nwhile(pages.length === (limit + offset)) {\n  offset += pages.length;\n  pages.push( ... (await getResults({ limit, offset}));\n}\nreturn pages;\n\nFor more detail, see this forum post and this forum post.\n\nincludeRefs\n\nInclude content of references in response.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  includeRefs: true\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  includeRefs: true\n})\n\ncacheSeconds\n\nSeconds to cache content. This sets the maximum age of the cache-control header response header. Set value higher for better performance, and lower for content that changes frequently.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  cacheSeconds: 10\n})\n\nstaleCacheSeconds\n\nBuilder.io uses stale-while-revalidate caching at the CDN level. This means Builder always serves from edge cache and updates caches in the background for maximum possible performance.\n\nIn this way, the more frequently content is requested, the fresher it is. The longest Builder holds something in stale cache is one day by default, but you can set this to be shorter if needed. We suggest keeping this high unless you have content that must change rapidly and gets very little traffic.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  staleCacheSeconds: 86400\n})\n\nsort\n\nProperty to order results by. Use 1 for ascending and -1 for descending.\n\nThe key is what you're sorting on, so the following example sorts by createdDate. and because the value is 1, the sort is ascending.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  sort: {\n    createdDate: 1\n  }\n})\n\nincludeUnpublished\n\nInclude content entries in a response that are still in draft mode and unarchived.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  includeUnpublished: true\n})\n\n\nUse the next example with the React (beta) SDK and React-Native SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  includeUnpublished: true\n})\n\nnoTraverse\n\nThough the default is true, you can pass false to include Symbol JSON in the response. This is helpful if you want to render your page all at once such as in server-side rendering.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  noTraverse: false\n})\n\n\nUse the next example with the React (beta) SDK and React-Native SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  noTraverse: true\n})\n\n\nContent API v3 is currently the default. Learn more in Content API Versions.\n\nTo experiment with the Content API, you can use the Builder API Explorer, which offers a way for you to compose queries in your own Builder Space. This way, you can confirm that your queries are correct before editing your code base.\n\nBuilder API Explorer"
  },
  {
    "title": "Dynamic Preview URLs - Builder.io",
    "url": "https://www.builder.io/c/docs/dynamic-preview-urls",
    "html": "Dynamic Preview URLs\n\nWhen you're working on Pages, Sections, or Data previewing your content with working targeting and custom fields can help you understand exactly how your work will render when you publish.\n\nBy default, Builder adds your targeted URL path to the model preview url you define, but there are cases where you need more to calculate the preview URL, such as:\n\nUsing locale codes as top routes, or even different domains per locale\nServing a different site—or top level domain—for mobile or desktop\nSection models that are rendered by a custom field; for example, a blog post model with a slug custom field that you’re rendering on blog/[slug]\nPreviewing live content on your live site and providing a fallback preview on a path, such as your-site.com/blog/_\nUsing custom fields or targeting for specific subpaths; for example /footwear/\nPrerequisites\n\nTo get the most out of this document, you should be familiar with:\n\nEditing and Previewing Your Site with Preview URLs\nCustom Fields\nModels\nExample: Setting up a Dynamic Preview URL on a blog post model\nGo to Models.\nOpen the Page, Section, or Data Model you'd like to add a Dynamic Preview URL to.\nAdd a slug custom field with a type of Text.\nClick on the code icon, < >, to the right of the Preview URL field. This opens a code editor with comments giving more context on this feature.\nAdd your custom code for determining your dynamic URLs.\nClick the X icon to close and click Save on the model.\n\nTip: The Dynamic Preview URLs feature is on by default; however, if the code icon, < >, isn't available on the model in the Preview URL field, check that it is on. Go to Settings > Advanced Settings > Editor. Make sure Advanced Preview URL Logic is toggled to the on position.\n\nThe video below demonstrates these steps on a blog post Section model.\n\nHow the example model and code work together\n\nThe Post Section model in this example has a required slug field so that when a user creates a blog post using the Post model, Builder prompts them to provide a slug.\n\nThe code then uses the slug to create the URL if isLive is true.\n\nThe example code in the video does two things:\n\nIf the content is live, the example code returns a URL that Builder can use to create the Dynamic Preview URL. The first part, you create by providing your site's URL. The second, dynamic part pulls the slug from the example's Post Section model.\nIf the content isn't live, the URL uses a default path, here blog/__builder_editing__. Your path can be different than the example.\n\nBe sure to replace https://your-site.com/your-directory/ with your site and directory. In the video example, the blog is hosted on Vercel, but your URL will be different.\n\n// Check to see if the content is live. If so,\n// use your site's URL followed by the \n// dynamic path you specify.\nif(contentModel.isLive) {\n    return `https://your-site.com/your-directory/${content.data.slug}`\n}\n// If the site's not live, use a placeholder URL\nreturn `https://your-site.com/your-directory/__builder_editing__`\n\nFor an example app, see Builder's Next.js CMS Blog example on GitHub. To use the example with Builder as in the video:\n\nIntegrate the example app with Builder by adding your Public API Key to the .env file.\nCreate a Post section model with at least one required custom field called slug of type Text.\nRun the app and use http://localhost:3000/ as your site in the code snippet.\n\nThe Dynamic Preview URLs feature is on by default; however, if the code icon, < >, isn't available on the model in the Preview URL field, check that it is on. Go to Settings > Advanced Settings > Editor. Make sure Advanced Preview URL Logic is toggled to the on position.\n\nTip: The Dynamic Preview URLs feature is on by default; however, if the code icon, < >, isn't available on the model in the Preview URL field, check that it is on. Go to Settings > Advanced Settings > Editor. Make sure Advanced Preview URL Logic is toggled to the on position.\n\nPreviewing your work with a Dynamic Preview URL\n\nTo use a Dynamic Preview URL, you must have already set up the logic on the model to use your site's live URL and the path you want. Use your Dynamic Preview URL by:\n\nCreate a content entry with the model that uses the Dynamic Preview URL.\nIn the Visual Editor, add or edit content if desired.\nClick the eyeball icon in the upper right and select View Current Draft.\n\nWhen the browser loads your content, the URL should include your URL and path.\n\nThe video below shows creating and previewing a blog post using the example Post Section model with a Dynamic Preview URL from the previous section in this document.\n\nAvailable objects and properties\n\nWhen writing your own custom logic to determine a Page, Section, or Data model preview URL, Builder offers helpful objects and properties:\n\nObject\tExample\tDescription\n\ncontent\n\n\t\n\nconst slug = content.data.slug ,\n\ncontent.data.title\n\n\t\n\na JSON representation of the current state of content\n\n\n\n\nspace\n\n\t\n\nspace.publicKey\n\n\t\n\nthe current space settings\n\n\n\n\ntargeting\n\n\t\n\ntargeting.urlPath\n\n\t\n\nAn object representing the targeting set on content. If a targeting attribute is an enum this value is an array of strings; for example, locale or device.\n\n\n\n\nfetch()\n\n\t\n\nconst settings = await fetch()\n\n\t\n\nUse for running async code. For more information on fetch(), see the MDN documentation.\n\n\n\n\ncontentModel\n\n\t\n\ncontentModel.isLive\n\n\t\n\nThe current content model, such as the Page or Section model you're working with.\n\n\n\n\npreviewDevice\n\n\t\n\nconst isMobile = previewDevice === 'mobile'\n\n\t\n\nThe device choice in the editor, it will be either mobile, tablet, or desktop\n\nThe contentModel object includes several important properties:\n\nisLive: true when the content is currently live on production and not scheduled for a future or prior date.\nstartDate: start date of scheduled publish, if scheduled\nendDate: end date of scheduled publish, if scheduled\nUsage examples\n\nMake sure that your Dynamic Preview URL logic returns a string. Each of the following examples returns a string while using different dynamic features.\n\nExample 1: Returning Blog URLs\n\nA blog might use a check to determine if your content is live and generate a URL that uses your slug or else use a fallback URL for editing based on that condition. Note that slug would be a custom field you add to the model, as in Setting up a Dynamic Preview URL on a model.\n\nif (contentModel.isLive) {\n  return `https://your-site.com/blog/${content.data.slug}`\n}\nreturn `https://your-site.com/blog/_`\n\nExample 2: Determining category\n\nThis example uses a category hero model that you can target at a specific category or all categories:\n\nreturn `https://your-site.com/category/${targeting.category || 'womens'}`;\n\nExample 3: Cart modal upsell\n\nThis returns a URL for a Section model that is for cart modal upsells:\n\nreturn `https://your-site.com/product/${targeting.product || '25752218M'}?addToCart=true`;\n\nExample 4: Returning URLs specific to locale\n\nThis example creates URLs for localized Pages:\n\nconst locale = targeting.locale?.[0] || 'en'\nreturn `https://your-site.com/${locale}${targeting.urlPath}`\nWhat's next\n\nYou can use targeting and custom fields along with Dynamic Preview URLs to significantly enhance the development experience. For more information, see:\n\nTargeting Content in Builder\nCustom Fields"
  },
  {
    "title": "Settings - Builder.io",
    "url": "https://www.builder.io/c/docs/settings#organization-settings",
    "html": "Settings\n\nThere two levels of Settings, Organization and Space. By changing settings at the appropriate level, you can manage many settings for your Organization and for individual Spaces.\n\nThis document covers how to get to Organization and Space Settings, and includes links to related documentation on the many features available in Settings.\n\nOrganization Settings\n\nThe Settings section of your Builder account is where you manage your Organization, your Space(s), and users.\n\nTo get to your Organization Settings:\n\nLogin to Builder.\nEnter your Organization.\nClick on the Settings icon at the bottom left of the UI.\n\nThe following video shows this process. In this case, the Organization is named Enterprise Docs demos, a space we use for our documentation demo videos and screenshots.\n\nThe name of your Organization will likely be different. However, getting to your Organization Settings is the same, regardless of plan.\n\nFor more information, read the following documents.\n\nUnderstanding Organizations: a conceptual overview of what an Organization is.\nManaging Your Organization: a how-to guide for the most common Organization tasks.\nSpace Settings\n\nTo get to your Space Settings:\n\nLogin to Builder.\nEnter the Space you'd like to manage.\nClick on the Account Settings icon at the bottom left of the UI.\n\nThe following video shows this process. In this case, the Space is named My Favorite Space, a space we use for our documentation demo videos and screenshots.\n\nThe name of your Space will likely be different. However, getting to your Space Settings is the same, regardless of plan.\n\nFor more information, read the following documentation.\n\nUnderstanding Spaces: a conceptual overview of what a Space is.\nManaging Spaces: a how-to guide for the most common Space tasks.\nLogging out of your account\n\nTo log out of your Builder account:\n\nGo to Space Settings or your Organization Settings (either one works).\nClick on the cog icon at the upper right.\nSelect Log Out.\n\nThe following image shows where the Log Out option is in Settings:\n\nWhat's next\n\nThrough Account Settings, you can manage many settings, and finetune Builder features for your team, including:\n\nOrganization\nSpaces\nUsers for your organization as well as your Space(s)\nRoles and Permissions\nPublic and Private API Keys\nSubscription\nBilling\nTargeting Attributes\nSocial Media integrations\nEnvironments"
  },
  {
    "title": "Managing Your Organization - Builder.io",
    "url": "https://www.builder.io/c/docs/managing-organizations",
    "html": "Managing Your Organization\n\nAn Organization is the top-most entity in Builder and contains users and Spaces.\n\nViewing and editing account details\n\nBuilder creates your first Organization automatically the first time you sign in.\n\nTo view or edit account details for your Organization, go to the Organization's Settings. With Admin permissions, you can:\n\nEdit the name of an Organization\nEdit and view billing information\nAccess private key information\nView invoices\nManage users\n\nThe following image is a screenshot of the Organization-level Settings, which features the Organization tab with account information and users, as well as the My Profile tab, which includes information about the name of the Organization and user account info. This document discusses each section in detail.\n\nManaging Spaces\n\nOrganizations contain Spaces. This means that you can access high-level data about a Space or create new a Space from within your Organization.\n\nAdding Spaces\n\nTo view all the spaces in an Organization, along with the number of users, bandwidth, and page views for those Spaces:\n\nGo to the Organization's Spaces tab.\nTo optionally filter data on the available spaces, click the three dots at the upper right and select a month and year.\nTo create a new Space within this Organization, click the + New Space button. Each space will have separate content, separate models, and separate Public API Keys.\n\nYou can also create a new Space by going to your Organization using the fly-out menu. Under your Organization, click + New Space.\n\nArchiving Spaces\n\nTo remove a Space from an Organization, you must archive that Space. Visit the Archiving a Space instructions in Managing Spaces.\n\nManaging payment and billing\n\nTo manage payment and billing information for your Organization:\n\nGo to the Organization Settings.\nTo the right of Payment, click Add Payment Info to add a credit card or Update Billing Info as required.\n\nSelf-Service customers can pay for the subscription with American Express, MasterCard, and Visa credit cards. Enterprise customers have the option of paying with ACH or wire transfer.\n\nViewing invoices\n\nTo view invoices for your Organization:\n\nGo to the Organization Settings.\nTo the right of Invoices, click View.\nAccessing invoices for Enterprise, Shopify, and Legacy plans\n\nEnterprise plans\n\nIf you need to change payment methods or access invoices, contact finance@builder.io.\n\nBuilder invoices for Shopify app users\n\nYou can find billing and invoices through Shopify's billing platform. Review your Shopify invoice to see any Builder charges.\n\nLegacy plans\n\nFor older accounts on legacy self-serve plans that only have a single space, you can see invoices within the Space Settings.\n\nManaging your billing and tax information\n\nTo update your billing and tax information — such as Tax ID or Tax Type — for your Organization:\n\nGo to the Organization Settings.\nOn the Payment line, click Update Billing Info.\nManaging Private Keys\n\nPrivate API Keys help you keep certain content private. For detailed information on Private API Keys, see the Managing Private API Keys section of Using Builder API Keys.\n\nManaging users\n\nYou must have users at the Organization level as well as in the Space they work in. Set up your users in this order:\n\nSet up your users in the Organization.\nSet up your users in the Space you want them to access.\n\nFor detailed instructions, see Managing Users.\n\nViewing Organization insights\n\nenterprise plans\n\nViewing the contents of the Insights tab for an Organization is an add-on feature available on the Enterprise plan.\n\nWhen this feature is enabled, Admins can access data such as who the most active users are, which, for example, can inform re-allocating user licenses based on activity.\n\nAdmins for the Organization have access to the Organization Insights, accessible from the Builder left sidebar. Organization Insights show you, by Space:\n\nUser names\nUser e-mail addresses\nUser role\nLast sign-in date\nCreation date\nLast refresh date\nDeleting an Organization\n\nIf you need to delete an Organization, contact us.\n\nWhat's next\n\nTo learn more about what's inside an Organization, see Roles and Permissions, Settings, and Spaces.\n\nIf you want to jump right in, visit Popular Tutorials."
  },
  {
    "title": "Getting Around with the Command Palette - Builder.io",
    "url": "https://www.builder.io/c/docs/command-palette",
    "html": "Getting Around Builder with the Command Palette\n\nGetting around Builder quickly can help you make the most of your time while working. Using the keyboard shortcut Cmd/Ctrl+k to open the Command Palette, you have direct access to Builder's most in-demand features.\n\nThe video below demonstrates one of the many Command Palette shortcuts, toggling the code editor.\n\nThis document covers:\n\nCommand Palette shortcuts\nUsing the Command Palette\nCommand Palette shortcuts\n\nTo search for content, grab key info, or navigate to any part of Builder use the Command Palette. You can directly and immediately access these features:\n\nToggle Dark Mode and Developer Options\nGo to the different sections of the Builder UI, such as Account Settings, or the Models section\nCopy your Public API Key\nSwitch to another Organization or Space\n\nWithin a content entry, the Command Palette has additional options specific to the Visual Editor including:\n\nImporting from web\nToggling the code editor, console, JSON view, templates\nDuplicating the current content entry\nLaunching Responsivizer\nImporting liquid\nViewing liquid output\n\nSelecting any of the suggested options in the Command Palette opens that section of Builder or feature.\n\nUsing the Command Palette\n\nWith the Command Palette you can immediately jump from one part of Builder to another, whether it be your content, areas of Builder—such as Account Settings or the documentation—or even launch Builder features such as JSON view or the code editor. To use the Command Palette:\n\nPress Cmd/Ctrl+k.\nType in your query or scroll to the option.\nPress Enter.\n\nTo filter content entries, type the word go followed by the name of the content entry; for example: go about, where the name of the entry you're looking for is \"about\".\n\nThe following video gives a brief demo of using the Command Palette to pull up a content entry in the Builder documentation called \"Breakpoints\", jump to the docs, copy your Public API Key, and toggle JSON view.\n\nWhat's next\n\nFor more on making the most of your workflow, see:\n\nKeyboard Shortcuts\nOrganizing Your Content with Folders"
  },
  {
    "title": "Extending Builder.io with Plugins - Builder.io",
    "url": "https://www.builder.io/c/docs/extending/plugins",
    "html": "Extending Builder with Plugins\n\nYou can create plugins to customize Builder and the Visual Editor to meet your team's needs. This document covers the areas you can customize with Builder.register(<some-key>):\n\nappTab:the left sidebar of the Builder UI\neditor.mainTab: top bar of the Visual Editor\neditor.editTab: the panel of the UI that contains the Insert, Options, Style, Layers, Animate, and Data tabs.\neditor.insertMenu: the Insert tab\neditor.toolbarButton: the topmost section of the Visual Editor that displays features such as the icons for targeting, scheduling, alerts, code, preview, and the Publish button.\n\nThe table in the next section provides a screenshot of which part of Builder each of these keys refer to and example of how you might customize it.\n\nTable of plugin options you can customize\nLocation\tExample\n\nappTab\n\n\t\n\nMake an app-wide tab that displays and edits content in unique ways using our read and write APIs.\n\nFor example, make a content calendar so you can view your scheduled content on a calendar that shows when content will go live when, and give the user the ability to drag to reschedule.\n\nimport { Builder } from '@builder.io/react';\n\nfunction CalendarView(props) {\n  return <>{/* Read content and display on a calendar */}</>;\n}\n\nBuilder.register('appTab', {\n  name: 'Calendar',\n  path: 'calendar',\n  icon:  'https:/...',\n  component: CalendarView,\n})\n\n\n\n\n\neditor.mainTab\n\n\t\n\nAdd a new tab located at the top of the preview window to view or edit the current document.\n\nFor example, create a notes tab so people can post and view notes to collaborate.\n\nimport { Builder } from '@builder.io/react';\nimport { useObserver } from 'mobx-react'\nconst context = require('@builder.io/app-context').default;\n\nfunction NotesTab(props) {\n  const { data } = context.designerState.editingContentModel;\n  return useObserver(() =>\n    <textarea \n      value={data.get('notes')} \n      onChange={e => data.set('notes', e.target.value)} /> \n  );\n}\n\nBuilder.register('editor.mainTab', {\n  name: 'Notes',\n  component: NotesTab,\n})\n\n\n\n\n\neditor.editTab\n\n\t\n\nAdd a new tab located on the left sidebar to edit the currently selected element(s).\n\nFor example, create a Tailwind UI tab that applies Tailwind classes to elements.\n\nimport { Builder } from '@builder.io/react';\nimport { useObserver } from 'mobx-react'\nconst context = require('@builder.io/app-context').default;\n\nfunction TailwindTab(props) {\n  const { selection } = context.designerState;\n  return useObserver(() => \n    <input title=\"color\" type=\"number\" onChange={e => {\n      selection.forEach(el => {\n        let value = e.target.value;\n        el.properties.set('class', `text-gray-${value}`)\n      })\n     } />\n  );\n}\n\nBuilder.register('editor.editTab', {\n  name: 'Tailwind',\n  component: TailwindTab,\n})\n\n\n\n\n\neditor.insertMenu\n\n\t\n\nOverride the Insert menu and display custom components.\n\nimport { Builder } from '@builder.io/react';\nconst { designerState } = require('@builder.io/app-context').default;\n\nfunction InsertTab(props) {\n  return <>\n    <div \n      onClick={() => \n        designerState.draggingInItem = 'Custom component 1' \n      } />\n    <div \n      onClick={() => \n        designerState.draggingInItem = 'Custom component 2' \n      } />\n  </>\n}\n\nBuilder.register('editor.insertMenu', {\n  component: InsertTab,\n})\n\n\n\n\n\neditor.toolbarButton\n\n\t\n\nAdd a toolbar button.\n\nFor example, create a workflow status button for custom workflows.\n\nimport { Builder } from '@builder.io/react';\nconst { designerState } = require('@builder.io/app-context').default;\n\nfunction WorkflowButton(props) {\n  return <div onClick={launchApprovalModal}>\n     Pending approval\n  </div>\n}\n\nBuilder.register('editor.toolbarButton', {\n  component: WorkflowButton,\n})\n\n\n\nTip: For an example plugin with multiple options, check out Builder's campaign plugin example."
  },
  {
    "title": "Tracking metrics with the Insights tab - Builder.io",
    "url": "https://www.builder.io/c/docs/viewing-metrics-from-the-insights-tab",
    "html": "Viewing Metrics with Insights\n\ngrowth plans\n\nYou can view metrics, such as engagement and conversion for Pages and Sections, using the Insights tab in the Visual Editor.\n\nThe Insights tab dashboard displays built-in as well as custom event metrics. Finally, you can visualize clicks, taps, and conversions using the heatmap.\n\nInsights dashboard\n\nNavigate to the Insights tab by selecting Insights near the top of the Visual Editor.\n\nThe Insights tab displays the dashboard and features the following data:\n\nMetrics table and charts: view built-in metrics including data such as impressions, clicks, conversions, and any of your custom event metrics.\nTime range: specify the time period of the data displayed by the overview dashboard.\nDownload CSV and customize metrics: click the three-dots button to download an overview dashboard data in CSV format. You can also customize displayed metrics using built-in events such as clicks or your own custom events.\n\nThe image below is an example default Insights dashboard.\n\nVisualizing clicks, taps, and conversions using the heatmap\n\nAll of your pages have a heatmap for visualizing your users' clicks and taps. The heatmap also correlates page interactions with conversions.\n\nTo get started, select View heatmap from the Insights tab.\n\nThe heatmap's features are as follows:\n\nHeatmap options: you can control the relative intensity and size of your map's hot spots using the sensitivity slider. Set a date range for input data and toggle whether to display conversion data.\nHot spots: these multicolored areas show user clicks and taps. Blue and green indicate areas with less user interaction while yellow, orange, and red indicate areas with more user interaction.\nSection overlays: hovering over a content section brings up an overlay that displays the number of clicks, click-through rate, and conversion value for that section.\nCreating a custom dashboard\n\nenterprise plans\n\nEnterprise customers can create their own fully-customizable dashboards. Developers can also modify these dashboards using custom SQL queries.\n\nFor more information, see Building custom dashboards."
  },
  {
    "title": "Components-only Mode - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/components-only-mode",
    "html": "Components-only Mode\n\nTo give your team just the components they need while keeping the UI intentional and specific to your needs, use components-only mode. With components-only mode, you can customize your team's collection of components to only the components you provide.\n\nYou can implement components-only mode at both the organizational or model level to help your team stay true to your design standards.\n\nPrerequisites\n\nTo use components-only mode, you should be familiar with:\n\nRegistering Custom Components\nUsing Custom Components in the Visual Editor\nUsing permissions to curate access to components\n\nComponents-only mode is an account-wide setting with toggles that affect all users in the same way. If you'd like to apply components-only mode to all of your users, go to the next section, Turning on components-only mode in Account Settings. If, instead, you'd like to specify access per user, you can use Roles and Permissions, as this section describes.\n\nBy assigning Editor permissions to particular users, you give them the ability to create content but they can't edit styles, which helps keep the design consistent. This is similar to components-only mode in that users have access only to what they need.\n\nIn this way, other users, such as designers can still make Templates and Symbols for Editors to use independent of the developer release cycle.\n\nTo apply the role of Editor to a user, do the following:\n\nGo to Account Settings.\nIn the Users section, click on the user to edit permissions.\nChoose Editor.\nClick the Update button.\n\nFor more information on specifying access, refer to Roles and Permissions.\n\nTurning on components-only mode\n\nIf you want to globally ensure that all users use only the components you provide, turn on components-only mode in Account Settings for the Space. This setting applies to all users.\n\nEditing this setting requires Admin or Developer permissions.\n\nThe following video shows you where to find the components-only mode in Account Settings and demonstrates toggling the three settings within the components-only dialogue. Though the video switches all three to the off position, you can set them independent of one another for varying degrees of access.\n\nTo turn on components-only mode in Account Settings, follow these steps:\n\nGo to Account Settings\nOn the row that reads Components-only mode, click the toggle to the on position. When you toggle to the on position, a dialogue opens with three settings.\n\nYou can toggle Builder's built-in blocks, decide whether users can edit margins, and if default styles apply. The next section explains each toggle in detail.\n\nIf you leave all three on, Builder removes the Style tab from the Visual Editor, but users can still drag in built-in blocks and adjust margins.\n\nAllow built-in components\n\nThe default for Allow built-in components is on, which permits the default blocks in Builder to be in the Insert tab. By toggling this setting to off, you remove all of the built-in blocks that come with Builder from the Insert tab. Changing this setting to off also removes the Style tab entirely so you can control styles from your code.\n\nUsers can still edit margins by dragging the margin dot on the block.\n\nThis toggle is useful if you want teammates to only use your custom components.\n\nTip: If you want to keep some built-in components but remove others in favor of your own versions, you can instead override Builder's components individually. For more information, refer to Overriding Built-in Components.\n\nWhen you toggle Allow built-in components to off, only Custom Components, My Templates, and My Symbols remain in the Insert tab, as in the following image:\n\nTip: If you use components-only mode with React and turn off Allow built-in components, you can use the lite build of the Builder React SDK for smaller bundle sizes.\n\nAllow margin editing\n\nUsers can edit block margins by default. When you turn off this feature, users can't edit margins on blocks by dragging the margin dot, which no longer displays. Changing this setting to off also removes the Style tab entirely so you can control styles from your code. This setting is useful for maintaining consistent spacing in your layouts.\n\nUse default styles\n\nTurning this setting off prevents Builder from adding default styles to blocks. Changing this setting to off removes the Style tab entirely so you can control styles from your code; however, users can still adjust margins by dragging the margin dot on a block.\n\nWhat's next\n\nTo experiment with components-only mode, check out an example custom design system in React on GitHub."
  },
  {
    "title": "Intro to Integrating Custom Components - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-components-intro?_host=www.builder.io",
    "html": "Integrating Custom Components\n\nYou can expand on Builder's selection of built-in blocks by registering components from your codebase with Builder. Then, teammates can drag and drop your components within Builder's Visual Editor just like any other block.\n\nYou can use components you code yourself or third-party components with Builder.\n\nGet Started\n\nUsing your custom components in Builder's Visual Editor is a minimal process:\n\nStep 1: Register Custom Components with Builder, which requires minimal code setup.\nLearn to register your components\nStep 2: Use your component in the Visual Editor by dragging and dropping your component like any other block and customizing it in the Visual Editor.\nUse cases for integrating custom components\n\nCustom components are ideal when you want to accomplish goals such as:\n\nAdding unique functionality to your site for special use cases\nSystematizing design and content patterns\nStandardizing your design system with custom components-only mode, which makes only your custom components available for use in the Visual Editor\nCustomizing blocks\nOverriding built-in blocks\nFurthering your customized experience\n\nAfter you've set up custom components in Builder you can customize your team's experience even further by:\n\nUsing Builder Blocks in Custom Components\nOverriding Built-in Components\nVersioning Custom Components\n\nNext steps\n\nTo get started using your custom components in Builder, head over to Registering Custom Components with Builder."
  },
  {
    "title": "Roles and Permissions in a Space - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/roles-and-permissions",
    "html": "Roles and Permissions in a Space\n\nBy assigning roles to users, you specify what they can access. This document covers roles and permissions by Space.\n\nBuilder provides a variety of built-in roles to grant appropriate access to team members in a Space.\n\nThe following table gives an overview of permissions by role.\n\nAccess\tContributor\tEditor\tDesigner\tDeveloper\tAdmin\n\nEdit block options\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nChange text and images\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nUpload images and video\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nCreate content\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nAdd, remove, move blocks\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nEdit styling\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nEdit code\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nEdit Models\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nEdit Billing\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nYes\n\nTip: Additionally, Enterprise plans can define custom roles for more granular controls and grant access by locale.\n\nContributor\n\nenterprise plans\n\nContributors cannot drag and drop to add, remove, or move blocks. They can only edit the options of blocks, such as the text and images, but not the layouts of them.\n\nContributor permissions are best for users you only want to modify basic page content like text or images. They cannot create or change layouts, add or remove blocks, or move anything around.\n\nThe screenshot below shows the Visual Editor as it appears for a contributor. The available tabs only include the Options tab and the comments tab.\n\nEditor\n\nEditors can create and edit content—such as text, images, and other blocks—but can't edit designs or styling.\n\nEditor permissions are ideal for users who need to create content using design systems. They can create and edit pages using pre-defined components (by developers) and templates and symbols (by designers). Editors can edit content by adding or changing text, uploading assets, or adding and rearranging page contents but have no access to styling or code.\n\nDesigners can create and edit content and designs.\n\nDevelopers can create and edit content, designs, code, and models.\n\nAdmins can do everything, including manage users and payment.\n\nenterprise add-on\n\nGranting access by locale\n\nenterprise plans\n\nTo specify which locales a role can access you must:\n\nHave an Organization with locales configured.\nBe an Organization Admin.\n\nTo specify one or more locales for a role:\n\nGo to Account Settings.\nClick on the Pencil next to Roles.\nExpand the role for which you'd like to specify locales. If you need to create a role, refer to Setting permissions.\nUnder Locale Access, you can specify access to all locales by checking Edit All Locales. To specify individual locales, uncheck Edit All Locales and select each locale in the Allow editing for selected locales dropdown.\n\nThe following video demonstrates this process:"
  },
  {
    "title": "Content API - Builder.io",
    "url": "https://www.builder.io/c/docs/content-api",
    "html": "Content API\n\nWith the Content API, you can make requests to retrieve data about any of your models within Builder. The Content API supports advanced query filtering with URL parameters to help you get exactly the data you need.\n\nUse cases for querying data could include searches, populating content for a collection, or getting all links that meet certain criteria.\n\nTo access this data, write queries with dot notation and, optionally, MongoDB style operators.\n\nFor more details on querying, see the Querying Cheatsheet.\n\nSet up\n\nTo start using the Content API, make sure to import the Builder SDK into your project.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\n\nAt the command line, use npm to install the Builder SDK:\n\nnpm install @builder.io/react\n\nIn your code, be sure to import the SDK:\n\nimport { builder } from \"@builder.io/react\";\nQuery requirements\n\nTo use the Builder Content API to retrieve data from your models, be sure to always provide the following request parameters in your queries:\n\nRequired: my-model-name (replace with your model's name)\nRequired: apiKey query param (replace with your Public API Key)\n\nAs an example, you'd replace my-model-name with the name of your model, such as page, and YOUR_API_KEY with your own Public API Key.\n\nhttps://cdn.builder.io/api/v3/my-model-name?apiKey=YOUR_API_KEY\nContent API query params\n\nThis section covers the available Builder Content API query params.\n\napiKey\n\nUse your API key when integrating with Builder.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\nbuilder.init(YOUR_API_KEY);\n\nquery\n\nMongoDB style query of your data.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from '@builder.io/react'\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  query: {\n    id: 'abc123',\n    data: {\n      myCustomField: 'someValue',\n      someNumber: { $ne: 2 }\n    }\n  }\n}\n\n// to get all entries from a page model that are using a specific symbol\n// where SYMBOL_ID is your Symbol's ID\nconst entry = await builder.get('page', {\n  query: {\n    'meta.symbolsUsed.SYMBOL_ID': true\n  }\n});\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  query: {\n    id: 'abc123',\n    data: {\n      myCustomField: 'someValue',\n      someNumber: { $ne: 2 }\n    }\n  }\n})\n\n// get all the entries from a page model that are using a specific symbol \n// where SYMBOL_ID is your Symbol's ID\nconst entry = await fetchOneEntry({\n  model: 'page',\n  query: {\n    'meta.symbolsUsed.SYMBOL_ID': true\n  }\n})\n\n\nBuilder supports the following operators: $eq $gt $in $lt $lte $ne $nin $and $not $or $nor $exists $type $elemMatch $gte $regex $options. For more information, including examples, see the Builder Querying Cheatsheet.\n\nuserAttributes\n\nOptionally use to send targeting attributes.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  userAttributes: {\n    urlPath: '/about',\n    device: 'desktop',\n    userLoggedIn: true\n  },\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  userAttributes: {\n    urlPath: '/about',\n    device: 'desktop',\n    userLoggedIn: true\n  },\n})\n\nfields\n\nOnly include these fields.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  fields: 'id, name, data.customField'\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  options: {\n    fields: 'id, name, data.customField'\n  }\n})\n\nomit\n\nOmit only these fields.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  omit: 'data, bigField, data.blocks'\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  options: {\n    omit: 'data, bigField, data.blocks'\n  }\n})\n\nlimit\n\nMax number of results to return. The default is 30 and the maximum is 100.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entries = await builder.getAll('my-model-name', {\n  limit: 10\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchEntries } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entries = await fetchEntries({\n  model: 'my-model-name',\n  limit: 10\n})\n\noffset\n\nUse to specify an offset for pagination of results. The default is 0.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  offset: 10\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  offset: 10\n})\n\n\nTo fetch all content beyond the limit of 100, use limit and offset together by paginating results and making multiple API calls as follows:\n\nconst limit = 100;\nlet offset = 0;\nconst pages = await getResults({limit, offset});\nwhile(pages.length === (limit + offset)) {\n  offset += pages.length;\n  pages.push( ... (await getResults({ limit, offset}));\n}\nreturn pages;\n\nFor more detail, see this forum post and this forum post.\n\nincludeRefs\n\nInclude content of references in response.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  includeRefs: true\n})\n\n\nUse the next example with the React (beta) SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  includeRefs: true\n})\n\ncacheSeconds\n\nSeconds to cache content. This sets the maximum age of the cache-control header response header. Set value higher for better performance, and lower for content that changes frequently.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  cacheSeconds: 10\n})\n\nstaleCacheSeconds\n\nBuilder.io uses stale-while-revalidate caching at the CDN level. This means Builder always serves from edge cache and updates caches in the background for maximum possible performance.\n\nIn this way, the more frequently content is requested, the fresher it is. The longest Builder holds something in stale cache is one day by default, but you can set this to be shorter if needed. We suggest keeping this high unless you have content that must change rapidly and gets very little traffic.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  staleCacheSeconds: 86400\n})\n\nsort\n\nProperty to order results by. Use 1 for ascending and -1 for descending.\n\nThe key is what you're sorting on, so the following example sorts by createdDate. and because the value is 1, the sort is ascending.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  sort: {\n    createdDate: 1\n  }\n})\n\nincludeUnpublished\n\nInclude content entries in a response that are still in draft mode and unarchived.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  includeUnpublished: true\n})\n\n\nUse the next example with the React (beta) SDK and React-Native SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  includeUnpublished: true\n})\n\nnoTraverse\n\nThough the default is true, you can pass false to include Symbol JSON in the response. This is helpful if you want to render your page all at once such as in server-side rendering.\n\nREST API\nJS\nNext\nApp Router\nQwik\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nimport { builder } from \"@builder.io/react\";\n\n// replace model with your model name\nconst entry = await builder.get('my-model-name', {\n  noTraverse: false\n})\n\n\nUse the next example with the React (beta) SDK and React-Native SDK.\n\nimport { fetchOneEntry } from '@builder.io/sdk-react'\n\n// replace model with your model name\nconst entry = await fetchOneEntry({\n  model: 'my-model-name',\n  noTraverse: true\n})\n\n\nContent API v3 is currently the default. Learn more in Content API Versions.\n\nTo experiment with the Content API, you can use the Builder API Explorer, which offers a way for you to compose queries in your own Builder Space. This way, you can confirm that your queries are correct before editing your code base.\n\nBuilder API Explorer"
  },
  {
    "title": "How to make a Symbol - Builder.io",
    "url": "https://www.builder.io/c/docs/make-a-symbol",
    "html": "Making a Symbol\n\nYou can use Symbols to create and control content that you can use in multiple places throughout your app. This article guides you through creating and updating a Symbol.\n\nPrerequisites\n\nTo get the most out of this document, make sure you are familiar with the following:\n\nReusing blocks: get to know the different types of reusable blocks, which include Symbols.\nIntroduction to Symbols\nOpening and editing Symbols\n\nThe following video walks through the process for creating a Symbol, and below the video the steps are outlined.\n\nCreating a Symbol\n\nTo create a Symbol:\n\nSelect the block you'd like to convert to a Symbol and click on the arrow next to the Edit button.\nClick Convert to Symbol.\nIn the dialogue, name your Symbol and leave the Model field with the default Create Symbol Model text.\nClick the Convert button.\n\nYour Symbol is ready to use throughout your Space.\n\nTip: If you've created your Symbol through the Models section, rather than converting a Block as in this article, you must Publish your Symbol to make it available for use.\n\nUpdating Symbols\n\nEdit your Symbol by selecting Edit and then the Edit Symbol button.\n\nThe Symbol opens so you can make your changes.\n\nTo Publish, select the green Publish button in the upper right of the Symbol.\n\nUsing a Symbol\n\nTo use your new Symbol in a page, in the Insert tab, select the My Symbols tab and drag and drop your Symbol block onto the page."
  },
  {
    "title": "Querying Cheatsheet - Builder.io",
    "url": "https://www.builder.io/c/docs/querying",
    "html": "Querying Cheatsheet\n\nThis document is a quick reference for query operators you can use to query anything that's on your content objects.\n\nTo experiment with querying your content from within Builder, you can use the Builder API Explorer.\n\nThis document covers the following operators:\n\nComparison Operators\n\n$eq\n\n$gt\n\n$gte\n\n$in\n\n$lt\n\n$lte\n\n$ne\n\n$nin\n\nLogical Operators\n\n$and\n\n$not\n\n$or\n\n$nor\n\nElement Operators\n\n$exists\n\n$type\n\nArray Operators\n\n$elemMatch\n\nEvaluation Operators\n\n$regex\n\n$options\n\nMongoDB style queries for your Builder data\n\nWhen querying Builder data, you can use MongoDB style operators, such as:\n\nOperator\tDescription\n$eq\n\t\n\nUse to match values equal to a specified value.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.myCustomProperty.$eq': 'sale'\n  }\n})\n\n\n\n$gt\n\t\n\nUse to match values greater than a specified value.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$gt': 50\n  }\n})\n\n\n\n$gte\n\t\n\nUse to match values greater than or equal to a specified value.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$gte': 50\n  }\n})\n\n\n\n$in\n\t\n\nUse to match any of the values you specify in an array.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.evenMoreCustomAttributes.$in': '[1, 2, 3]'\n  }\n})\n\n\nWhen querying an array of strings, use JavaScript notation and pass an array of strings to the $in operator.\n\nbuilder.get('your-model', {\n  query: {\n    'data.evenMoreCustomAttributes.$in': '[\"myString1\", \"myString2\", \"myString3\"]'\n  }\n})\n\n\n\n$lt\n\t\n\nUse to match values less than a specified value.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.evenMoreCustomProperty.$lt': 100\n  }\n})\n\n\n\n$lte\n\t\n\nUse to match values that are less than or equal to a specified value.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.evenMoreCustomProperty.$lte': 100\n  }\n})\n\n\n\n$ne\n\t\n\nUse to match all values not equal to a specified value.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$ne': 'womens'\n  }\n})\n\n\n\n$nin\n\t\n\nUse to match none of the values specified in an array. This example excludes the numbers 50 and 51.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$nin': '[50, 51]'\n  }\n})\n\n\n\n$and\n\t\n\nUse to join query clauses with a logical and and return all documents that match the conditions of both clauses.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$and': '[ \n      { item: { $ne: 'hat' } }, { item: { $exists: true } } \n    ]'\n  }\n})\n\n\n\n$not\n\t\n\nUse to invert the effect of a query expression and return documents that do not match the query expression.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$not': 'hat'\n  }\n})\n\n\n\n$or\n\t\n\nUse to join query clauses with a logical or and return all documents that match the conditions of either clause.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$or': '[ \n      { quantity: { $gt: 5 } }, { price: 100 } \n    ]' \n  }\n})\n\n\n\n$nor\n\t\n\nUse to join query clauses with a logical nor and return all documents that do not match both clauses.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$nor': '[ \n      { price: 100 }, { closeout: true } \n    ]' \n  }\n})\n\n\n\n$exists\n\t\n\nUse to match documents that have the specified field.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$exists': true \n  }\n})\n\n\n\n$type\n\t\n\nUse to select documents if a field is of the specified type.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$type': boolean \n  }\n})\n\n\n\n$elemMatch\n\t\n\nUse to select documents if element in the array field matches all the specified $elemMatch conditions.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.anotherCustomProperty.$elemMatch': { \n      item: { $ne: 'hat' } \n    }\n  }\n})\n\n\n\n$regex\n\t\n\nUse to select documents where values match a specified regular expression.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.someNumber.$regex': /pattern/\n  }\n})\n\n\n\n$options\n\t\n\nUse to specify options to use with $regex.\n\nJS\nREST API\nbuilder.get('your-model', {\n  query: {\n    'data.someNumber.$regex': \n    'pattern&query.data.someNumber.$option=gi'\n  }\n})\n\n\nFor more detail about available options, refer to the MongoDB $regex documentation.\n\nDescriptions for the above operators adapted from MongoDB per the Creative Commons License as referenced on the MongoDB Documentation GitHub repo. For more in-depth information on the query operators above, see MongoDB's documentation on Query and Projection Operators.\n\nWhat's next\n\nFor more information on querying, see the Content API documentation."
  },
  {
    "title": "Architecture Best Practices - Builder.io",
    "url": "https://www.builder.io/c/docs/architecture",
    "html": "Architecture Best Practices\n\nTo build your site most efficiently, use this guide's best practices for:\n\nStructuring your integrated app\nDeciding what goes into Builder and what stays in your code\nStructuring your integrated app\n\nBy using Builder's models with a few points in mind, you can establish a structure for your app that lends itself more readily to working in parallel. With this workflow, you can unblock teammates so that they can take care of more of their own needs to meet deliverables.\n\nUse one Page model\n\nA model is like a cookie-cutter, a paradigm that you can use over and over again to create infinitely varied creations.\n\nGenerally, you only need one Page model to reuse for multiple pages. A Page is distinct from a Section in that a Page requires a URL, while a Section does not. For more information on Page models, see Page Models.\n\nUse Section models for parts of Pages\n\nA Section is a part of a Page; for example, a banner, a marketing section on a product page, or a hero.\n\nAt Builder.io, we use Sections for the docs left side navigation, blog articles, and docs headers.\n\nFor more information on Section models, see Section Models.\n\nUse Data models for non-visual structured data\n\nStructured Data models are a key feature of any CMS, and best reserved for non-visual elements.\n\nIn most cases, a Section Model is the preferred choice, except for things that truly are purely data; such as blog authors, product information, or other needs that are best as minimal, structured data.\n\nExplore common integration patterns:\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nDeciding what goes into Builder\n\nWhen integrating your codebase and Builder, a best practice is to keep some things in Builder while keeping others in your code. This empowers all team members by giving each access to what they need to edit in a way that compliments their workflow.\n\nFor example, if you keep parts of your site that are visually based in Builder, non-developers can freely iterate on non-code parts of the app such as copy, design, and layout. In this way, developers can stay focused on the code.\n\nWhen deciding what goes into Builder and what stays in code, consider these points.\n\nKeep it in Builder if:\n\nA non-developer maintains it\nContent is conversion-driven\nInvolves repeated iteration\nContains ephemeral content\nFeatures layouts; regular and A/B testing layouts\n\nKeep it in code if:\n\nA developer maintains it\nInvolves nuanced logic\nIs static, unchanging data\nContains content that doesn't change often\nConsists of components that already exist in code\n\nThe following tree shows this same decision-making process for determining what goes into Builder and what stays in code:\n\nNext Steps\n\nWhen you use Builder best practices to architect your site, you help your team mates work in parallel by leveraging powerful features for each role. For more information on who does what, see:\n\nRoles and Permissions"
  },
  {
    "title": "Targeting Content - Builder.io",
    "url": "https://www.builder.io/c/docs/targeting",
    "html": "Targeting Content\n\ngrowth plans\n\nTargeting content for specific audiences can help you drive customer acquisition and retention.\n\nYou can target content based on attributes such as whether customers have purchased from a specific collection, their current product page, or if they have a product with a specific tag in their cart. These are just a few examples—there are endless possibilities for targeting.\n\nPrerequisites\n\nTo get the most out of this article, you should be familiar with the following:\n\nTargeting and Scheduling Content\nTargeting options by plan\n\nTargeting options in Builder depend on your plan.\n\nAll plans come with the URL Path targeting attribute.\nGrowth and Enterprise plans offer both URL Path and Device targeting capabilities.\nWith Growth plans and above, can use your own Custom Targeting Attributes.\nBuilder provides e-commerce plugins for various platforms, each equipped with custom targeting attributes.\nAccessing targeting attributes\n\nTo use targeting:\n\nOpen the content entry for which you'd like to configure targeting.\nClick the Targeting icon at the top of the Visual Editor.\nIn the Targeting dialog, click +Target, and choose a property from the dropdown menu.\n\nAs an example, the following video shows targeting where the URL is /demo and the Device is mobile. This means this page is to be delivered when the device the visitor is using is a mobile device.\n\nTargeting by device with SSR? When using SSR or SSG, and targeting by device—such as mobile, tablet, or desktop—you must reference the targeted device in userAttributes as in the following example:\n\nuserAttributes: {\n    ...\n  device: \"mobile\"\n}\n\n\nFor more details on userAttributes, visit the userAttributes entry in the Content API documentation.\n\nFor a Next.js-specific example, refer to this example on GitHub for retrieving userAgent and device type server side.\n\nUsing order with targeting\n\nThe order of content entries in Builder determines how Builder evaluates and determines which content entry to deliver. Builder starts at the top of the list of entries at the specified URL and works its way down to find the entry to render.\n\nFor example, when you have multiple pages set up as alternatives for a specific targeting condition, they all share the same URL. When a user requests that URL, Builder checks each page in the list associated with that URL, starting at the top. The first page that meets the specified targeting condition is the version that is displayed to the user.\n\nExample\n\nConsider three versions of a homepage; home, home 2, and home 3. Each has different content, but they are all at the same URL, as in the following:\n\nhome 3, targeting mobile\nhome 2, targeting desktop\nhome (fallback), with no targeting\n\nHere's how Builder determines which Page to deliver:\n\nFirst, Builder considers all published Pages at the requested URL, /.\nIf home 3 has the Device targeting attribute set to Mobile, and your user visits yoursite.com from their phone, they get the content from home 3.\nIf home 2 targets Tablet, Builder delivers that Page to tablet users.\nThis example also has a fallback, home (fallback), just in case. It's a best practice to be sure all your conditions have a fallback Page in case none of the conditions are met.\n\nWhen you configure targeting, you establish a condition about a user and then deliver the appropriate content to that user. For example, you might want a user on a mobile device to have a different UI from a user on a laptop. Targeting statements follow the below pattern:\n\nWhere condition + operator + value\n\nBuilt-in conditions are:\n\nDevice\nURL Path\n\nSome examples of targeting statements are:\n\nWhere URL is /shoes\nWhere device is tablet\n\nThe operators available are:\n\nis means equal to the value\nis not means not the value. Available for conditions with one possible value; for example, a Boolean.\ncontains means the condition includes in it the string you specify for the value\nstarts with means the condition begins with the string you specify for the value\nends with means the condition ends with the string you specify for the value\n\nAdditionally, if you're on a Growth or Enterprise plan, you can customize targeting to meet your specific needs. For more information, see Custom Targeting Attributes.\n\nTargeting in-depth\n\nThe following video provides an in-depth introduction to targeting in Builder:\n\nFor more information targeting based on query parameters, visit this Builder Forum discussion.\n\nShopify custom attributes\n\nWith Shopify, Builder offers several ways to target content. For example, you can leverage your Shopify customer tags or if a user has specific items in their cart, you can display and even A/B test your content.\n\nDepending on the type of theme page you're working on, such as a homepage, a collection page, or a product page, Builder populates additional targeting parameters specific to the theme page."
  },
  {
    "title": "Introduction to Symbols - Builder.io",
    "url": "https://www.builder.io/c/docs/symbols-intro?_host=www.builder.io",
    "html": "Intro to Symbols\n\nWhen you want to create one element, reuse it throughout your site, and update all instances at once, use a Symbol. When you edit and Publish updates, the Symbol updates apply immediately to all occurrences of that Symbol throughout your app.\n\nYou can use Symbols for any content you want to reuse, such as a header, footer, or products. In fact, you can use it for repeated content that you want to use many places, such as a definition, an introductory paragraph or even a section of illustrated code.\n\nMake it once, reuse infinitely\n\nSave time by creating reusable elements such as headers, footers, navigation, and forms. Updates apply automatically to all instances of your Symbol.\n\nTo create your own Symbol, see How to create a Symbol.\n\nCustomizing your Symbols\n\nOccasionally, you might require an element like a product recommendation section or banner that needs to vary under specific conditions. In such cases, you can detach a Symbol from its source, Making a Symbol inline, which converts it into a standard Builder block. This way you can make inline changes for that particular instance.\n\nFor more on customizing Symbols, visit Adding Inputs to Symbols.\n\nTip: For a reusable component that you can edit individually, see Creating Templates. Templates are like Symbols, but when you edit a Template on a page, the other instances of that Template don't change.\n\nAdding a symbol to another account\n\nAt this time, you cannot transfer a symbol from one account to another. One workaround is to download your symbol and upload it to your other account.\n\nOpen the symbol you want to copy.\nRight click on the symbol and select Download content as JSON.\nCreate a new page in your other account, right click in the editor window, and select Upload builder.json file."
  },
  {
    "title": "Intro to Models - Builder.io",
    "url": "https://www.builder.io/c/docs/models-intro?_host=www.builder.io",
    "html": "Intro to Models\n\nA model is a paradigm—a pattern for something else. Builder offers three kinds of models that define content types:\n\nA Page model: The basis for a full Page built in Builder\nA Section model: The basis for a part of a Page.\nA Data model: Gives structure to a collection of data that you render as you choose.\n\nYou use these models as the defining source for content entries. Like a rubber stamp, the model provides a basic foundation. Each time you use a rubber stamp, the fundamental characteristics are the same but you might use the resulting image differently by varying other factors such as color and surface.\n\nSimilarly, with models in Builder you can define what a Page, Section, or collection of Data is and use those models over and over to build your site and populate it with content. And you can create as many models as you like.\n\nThe following graphic compares Builder models. Follow the Try it out link to play with a demo of each.\n\nVisual Pages\n\nTry out Pages\n\nUse Pages to manage entire pages, such as:\n\nMarketing and content pages\nLanding pages\n\nVisual Sections\n\nTry out Sections\n\nUse Sections to maintain parts of your site or app, such as:\n\nAnnouncement bars\nProduct editorial\nCollection heroes\nCart upsells\n\nStructured Data\n\nTry out Data\n\nUse Structured Data to manage structured data, such as:\n\nNavigation links\nProduct details\nBlog post authors\n\nAll models in Builder support:\n\nA/B Testing: Test different versions of your content.\nTargeting and Scheduling: Deliver the right content to the right people at the right time.\nRoles and permissions: Admins and Developers can edit models by default, but you can also specify permissions by content model using Custom Roles.\n\nThis means that you can granularly grant permissions, test, and precisely deliver content.\n\nExplore common integration patterns:\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nUsing models to build your app\n\nWhen you use models to build your app, you can create exactly the Pages, Sections, and Data specific to your use case. With your integrated app, you can, for example, use your Sections in the Pages you choose as well as reuse Data wherever you need it.\n\nExamples of models include:\n\nA seasonal announcement banner placed on a page between certain dates.\nMarketing tile targeting a specific persona on certain pages.\nBlog authors whose profiles you want to link to from different parts of your site.\n\nBy creating models for each type of content you need, you can ensure consistency while making the process of iterating more efficient. The developer creates and integrates a model and non-developer teammates can use that model to create as many content entries as they need.\n\nThe following diagram shows a typical Builder documentation page. The left side navigation is a Section, the body of the document is a Page, and the font colors are stored in a Data content entry.\n\nWhat's next\n\nTo get the most out of Builder Models, be sure to integrate and learn about each type of model:\n\nPage Model: Learn what a Page model is and how to use one.\nIntegrating Pages: Integrate Page building with your code base so non-dev team members can create as many pages as they need and developers can focus on code.\nSection Models: Learn about Section use cases and how to use Sections in your app.\nIntegrating Sections: Integrate Builder Sections with your codebase so teammates can create and use Sections wherever they need them.\nData Models: Give shape to data and learn how to query that data.\nIntegrating CMS Data: Integrate data to create reusable data across your site.\nCustom Fields: Learn about the wide array of options available for shaping your models."
  },
  {
    "title": "Using Custom Targeting - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-targeting-attributes",
    "html": "Custom Targeting\n\ngrowth plans\n\nLearn how to create custom targeting attributes in Builder.io to go beyond the built-in targeting options.\n\nPrerequisites:\nYou may want to read Targeting Content in Builder if this topic is new to you.\n\nThe short video below explains custom targeting attributes.\n\nYou can set custom targeting attributes to conditionally render content based on complex criteria. For example, you can:\n\nHave an announcement bar appear when a customer adds a certain item to their cart.\nDisplay different pages depending on a user's current stage in your onboarding flow.\nCustomize a sidebar depending on a user's profile.\n\nUsing Builder's built-in types, custom targeting attributes offer a straightforward way to allow your team to specify arbitrary targeting conditions using strings and booleans. Using custom types further allows your team to create targeting conditions based on input from forms, color pickers, calendars, and other rich user interfaces.\n\nSetting up a custom targeting attribute\n\nYou can set up a custom targeting attribute on the Account page, which enables you to use that attribute when targeting any content across your space.\n\nFrom the Account page, click the Edit pencil for Custom targeting attributes.\n\nClick New target attribute.\n\nYou can add a new custom targeting attribute from the Custom targeting attributes window using the following properties:\n\nName: The name of your custom targeting attribute.\nType: Your attribute's type determines the editor UI that pops up when a user targets content using your attribute. For example, users may enter text for a targeting attribute that has a string type inside of a text box, while a boolean type attribute presents the user with a toggle switch.\nEnum (string type only): Restricts user input for the string type to a multiple-choice selection of strings.\n\nClick Save to create your new custom targeting attribute.\n\nTargeting content with custom targeting attributes\n\nYou can target content with your custom targeting attributes by creating targeting conditions using those attributes.\n\nThe process is the same as targeting with built-in attributes; the only difference is that your custom targeting attributes appear in the list of attributes to choose from when creating a targeting condition.\n\nThe example below features two custom targeting attributes called Some string and Some product.\n\nRendering targeted content with custom targeting attributes\n\nTargeting works by matching the value of targeting data sent with a content API request to the value of your targeted content's targeting conditions. When you request content that uses the built-in Device or URL path targeting attributes, Builder automatically infers the targeting data from your request.\n\nWhen using custom targeting attributes, you can manually provide targeting data with your request either by using the JavaScript (JS) SDK or with query string parameters when requesting content using the content/GraphQL APIs.\n\nFor example, when requesting content that has a targeting condition named product that expects a product ID, you can set userAttributes when using the SDK:\n\nconst content = await builder.get('myTargetedContent', {\n  userAttributes: { product: product.id }\n}).promise();\n\n\nYou can alternatively use setUserAttributes to set the targeting attributes once across multiple content requests:\n\nbuilder.setUserAttributes({ product: product.id });\n\nconst content = await builder.get('myTargetedContent').promise();\nconst otherContent = await builder.get('myOtherTargetedContent').promise();\n\nFinally, when requesting content directly from the content or GraphQL APIs, you can pass the targeting attributes using query strings:\n\nconst response = await fetch(`https://cdn.builder.io/api/v2/content/my-model?apiKey=YOUR_API_KEY&userAttributes.product=${product.id}`)\n\nIf product.id matches the ID of the product selected for your targeting condition, then your content will be rendered.\n\nMatching custom targeting attributes with custom types\n\nIn order to know what targeting data to send with a content API request, it's important to know how a targeting attribute's type editor stores a user's input as a value.\n\nFor example, the editor for the built-in string type is a simple text box. The value entered inside this text box when adding a targeting condition is the value that must match the targeting data sent with your content API request for your content to be rendered.\n\nIn contrast, custom types generally provide editors with rich user interfaces, allowing users to provide complex inputs such as colors, forms, or products. How these inputs are represented as a stored value isn't always immediately clear and depends on the editor.\n\nFor example, the Shopify plugin's Shopify product handle custom type provides a searchable menu for selecting a product from a Shopify store. The editor stores the product's Shopify handle as the value.\n\nThe same plugin also provides a Shopify product custom type. Despite providing the same editor user interface for selecting a product, it stores the selected product using its Shopify ID.\n\nYou can refer to the documentation for the plugin that provides the custom type used by your custom attribute for more information on how the type's editor stores values.\n\nFor more information on passing parameters, check out the Builder Content API.\n\nNext steps"
  },
  {
    "title": "Targeting Content - Builder.io",
    "url": "https://www.builder.io/c/docs/targeting?_host=www.builder.io",
    "html": "Targeting Content\n\ngrowth plans\n\nTargeting content for specific audiences can help you drive customer acquisition and retention.\n\nYou can target content based on attributes such as whether customers have purchased from a specific collection, their current product page, or if they have a product with a specific tag in their cart. These are just a few examples—there are endless possibilities for targeting.\n\nPrerequisites\n\nTo get the most out of this article, you should be familiar with the following:\n\nTargeting and Scheduling Content\nTargeting options by plan\n\nTargeting options in Builder depend on your plan.\n\nAll plans come with the URL Path targeting attribute.\nGrowth and Enterprise plans offer both URL Path and Device targeting capabilities.\nWith Growth plans and above, can use your own Custom Targeting Attributes.\nBuilder provides e-commerce plugins for various platforms, each equipped with custom targeting attributes.\nAccessing targeting attributes\n\nTo use targeting:\n\nOpen the content entry for which you'd like to configure targeting.\nClick the Targeting icon at the top of the Visual Editor.\nIn the Targeting dialog, click +Target, and choose a property from the dropdown menu.\n\nAs an example, the following video shows targeting where the URL is /demo and the Device is mobile. This means this page is to be delivered when the device the visitor is using is a mobile device.\n\nTargeting by device with SSR? When using SSR or SSG, and targeting by device—such as mobile, tablet, or desktop—you must reference the targeted device in userAttributes as in the following example:\n\nuserAttributes: {\n    ...\n  device: \"mobile\"\n}\n\n\nFor more details on userAttributes, visit the userAttributes entry in the Content API documentation.\n\nFor a Next.js-specific example, refer to this example on GitHub for retrieving userAgent and device type server side.\n\nUsing order with targeting\n\nThe order of content entries in Builder determines how Builder evaluates and determines which content entry to deliver. Builder starts at the top of the list of entries at the specified URL and works its way down to find the entry to render.\n\nFor example, when you have multiple pages set up as alternatives for a specific targeting condition, they all share the same URL. When a user requests that URL, Builder checks each page in the list associated with that URL, starting at the top. The first page that meets the specified targeting condition is the version that is displayed to the user.\n\nExample\n\nConsider three versions of a homepage; home, home 2, and home 3. Each has different content, but they are all at the same URL, as in the following:\n\nhome 3, targeting mobile\nhome 2, targeting desktop\nhome (fallback), with no targeting\n\nHere's how Builder determines which Page to deliver:\n\nFirst, Builder considers all published Pages at the requested URL, /.\nIf home 3 has the Device targeting attribute set to Mobile, and your user visits yoursite.com from their phone, they get the content from home 3.\nIf home 2 targets Tablet, Builder delivers that Page to tablet users.\nThis example also has a fallback, home (fallback), just in case. It's a best practice to be sure all your conditions have a fallback Page in case none of the conditions are met.\n\nWhen you configure targeting, you establish a condition about a user and then deliver the appropriate content to that user. For example, you might want a user on a mobile device to have a different UI from a user on a laptop. Targeting statements follow the below pattern:\n\nWhere condition + operator + value\n\nBuilt-in conditions are:\n\nDevice\nURL Path\n\nSome examples of targeting statements are:\n\nWhere URL is /shoes\nWhere device is tablet\n\nThe operators available are:\n\nis means equal to the value\nis not means not the value. Available for conditions with one possible value; for example, a Boolean.\ncontains means the condition includes in it the string you specify for the value\nstarts with means the condition begins with the string you specify for the value\nends with means the condition ends with the string you specify for the value\n\nAdditionally, if you're on a Growth or Enterprise plan, you can customize targeting to meet your specific needs. For more information, see Custom Targeting Attributes.\n\nTargeting in-depth\n\nThe following video provides an in-depth introduction to targeting in Builder:\n\nFor more information targeting based on query parameters, visit this Builder Forum discussion.\n\nShopify custom attributes\n\nWith Shopify, Builder offers several ways to target content. For example, you can leverage your Shopify customer tags or if a user has specific items in their cart, you can display and even A/B test your content.\n\nDepending on the type of theme page you're working on, such as a homepage, a collection page, or a product page, Builder populates additional targeting parameters specific to the theme page."
  },
  {
    "title": "Editing an Previewing Your Site - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/preview-url",
    "html": "Editing and Previewing Your Site\n\nWhen you've integrated your app with Builder, you can edit and preview your site using a preview URL. Setting a preview URL gives you a way to develop and preview your site in the browser, just as you would any other site.\n\nTip: If you are using the HTML API to serve Builder content, follow the steps in the Previewing content on your site section of Builder HTML API to set up previewing for your content.\n\nPrerequisites\n\nTo get the most out of this document, you should have already completed the following:\n\nintegrated page building or section building\nPreview URLs work with all models\n\nYou can set a preview URL on a Page, Section, or Data model. Using a preview URL on any model gives you a way to render content and data to preview Pages, Sections, or Data while you're working.\n\nTip: With the Builder's React SDK, you can use live editing to render Data changes in real time. For configuration instructions, read the Usage with Data Models section of the React SDK readme on GitHub. If you aren't using the React SDK, you can still preview your data model. Once published, the changes will be reflected in the Visual Editor preview.\n\nSetting a persistent preview URL on a model\n\nWhen you're still building out your site before going live, you need to work locally for extended periods with the convenience of a persistent preview URL. In this scenario, you can set the preview URL on the model so that all content using that model is automatically configured with the preview URL.\n\nFor example, if you're creating pages and need to preview all pages on localhost, you can set the preview URL on the Page model to localhost so that all Page content has that preview URL of localhost.\n\nWhen your site is ready to go live, change the URL on the model to your staging or production URL.\n\nThe following video demonstrates opening a model and setting the URL.\n\nImportant: If you change the preview URL of a model from, for example, a live URL that is in production to localhost, any content using that model will no longer be live and all parts of your app using that model will be affected.\n\nIf you need to set the URL on the model, you must be certain that no published content is using that model.\n\nSetting a temporary preview URL\n\nWhen developing your app, you can set a temporary preview URL that resets upon refresh or if you leave the Visual Editor.\n\nThe following video shows how to click on the preview URL in the Visual Editor and edit it. This method is helpful if you're working on a page that is currently in production but that you would like to develop further. In this example, the preview URL is http://localhost:3000/test-page; that is, the localhost with the name of the page url, here, /test-page.\n\nSetting a temporary preview URL host in Developer Options\n\nWhen you need to test out new changes or components in your local code across multiple content entries or models, it can be handy to override your preview URL host (e.g. from your production host, like your-site.com, to your localhost) for the duration of your session.\n\nThis can save you from entering a temporary URL repeatedly as you move across content models or entries, when you want to be connected to your localhost throughout.\n\nTo set a preview URL temporarily for just your session, without affecting other teammates, use the Developer Options as follows:\n\nIn the Visual Editor, press Cmd+Ctrl+a or ⊞ Win +Ctrl+a to open the Developer Options. You must have Admin or Developer permissions to open this dialogue.\nIn the Override preview URL host field, enter the preview URL you'd like to use. This example uses http://localhost:4200, but your URL might be different.\nClick the X to close the dialogue.\n\nThis setting takes effect for the duration of your session, or until you remove it.\n\nSetting the URL in Developer Options only affects the user who changes this setting, not other developers, teammates, or site visitors.\n\nThe following video demonstrates using Developer Options to set the preview URL to localhost.\n\nWhen working on static sites, such as with Gatsby, Nuxt, or Next.js in static mode, there is some additional configuration you might need to do to get your preview URL to render previews.\n\nBy default, when creating a page and editing it in Builder, the editor and preview loads the URL for that page. For example, if you create a new page at /example but your static site has no such page, you could get a 404. There are two options for this scenario:\n\nAdding the Builder component to your 404 page\nToggling off this behavior of previewing and editing on the specific URL for a page\n\nIf you're getting a 404, add the Builder component to your 404 page to support previewing and editing.\n\nOn your 404 page in your code base, add <BuilderComponent> as in the following code snippet. In this example, if the page isn't found, BuilderComponent still returns a Builder page, so Builder gets the message it expects and returns a page.\n\nimport { Builder, BuilderComponent } from '@builder.io/react';\n\nexport function NotFoundPage() {\n  if (Builder.isPreviewing || Builder.isEditing) {\n     return <BuilderComponent model=\"page\" />\n  }\n\n  return <Your404Page />\n}\n\n\nTo turn off the default behavior of previewing and editing on the specific URL for a page, do the following.\n\nGo to Account Settings > Advanced Settings > Advanced.\nToggle Reload preview on URL path change to the off position.\n\nYou can turn off this setting to load the preview and editor on your hardcoded URL; for example, /builder-editing, regardless of the current editor path.\n\nThe following video demonstrates how to turn off the Reload preview on URL path change setting:\n\nYou can add logic to Page and Section models to dynamically create the preview URL. For example, you can use a snippet like the below to preview blog posts:\n\n// Check to see if the content is live. If so,\n// use your site's URL followed by the \n// dynamic path you specify.\nif(contentModel.isLive) {\n    return `https://your-site.com/your-directory/${content.data.slug}`\n}\n// If the site's not live, use a placeholder URL\nreturn `https://your-site.com/your-directory/__builder_editing__`\n\nYou can customize the Dynamic Preview URL logic on a model so that you can use features such as targeting, custom fields, and localization while previewing. For more details, refer to Dynamic Preview URLs.\n\nWhat's next\n\nIf you've integrated and followed all the instructions above but your iframe contents still aren't loading, check out Getting Your Preview URL Working."
  },
  {
    "title": "Section Models - Builder.io",
    "url": "https://www.builder.io/c/docs/models-sections",
    "html": "Section Models\n\nSection Models are the paradigm, or pattern, that defines what a Section is. When you make a Section content entry in the Content section of Builder, Builder uses the chosen Section model to create that Section content entry.\n\nIntegrate Builder Sections with your codebase\n\nWhen you integrate, non-coding team members can create as many Sections as they need for iterating, testing, targeting, and scheduling—leaving developers free to focus on the code.\n\nIntegrate Section Building\n\nAbout Section models\n\nA Section model describes a portion of a Page that your teammates can use in the Visual Editor. Use Section models to define editable parts of Pages, such as:\n\nAnnouncement bars\nMarketing sections on collection pages\nHeroes\nBlog posts\n\nLike Pages, you use Sections in the Visual Editor's drag-and-drop interface. Unlike Pages, however, a URL is optional for Sections.\n\nThe following image outlines an Add Block area of a Page. This area, a Section, is only a part of the Page.\n\nWith Sections, you can create your Section and then use targeting and querying to make it display in the right place at the right time. For more information, refer to Targeting and Scheduling Content.\n\nFinding Section models\n\nTo view the details of a Section model in a Space, do the following:\n\nGo to the Models section of the Builder UI.\nSelect the Section model.\n\nFrom within the Section model, you can edit and add fields. For details on fields in models, refer to Custom Fields.\n\nThe following video demonstrates the above steps for locating and opening a model. In this example, the Section model is named Blog article.\n\nCreating Section models\n\nYou can create Section models for any area of a Page. Section models are perfect for variations and iterating and you can create as many as you like.\n\nTo create and use a Section model, do the following:\n\nGo the the Models section of the Builder UI.\nClick the + Create Model button.\nChoose Section.\nIn the Model Display name field, enter the name you'd like this model to have when listed in the Models section of Builder. You can edit this later if you change your mind.\nName the model and fill out the Model Description field.\nClick Create.\nAdd any needed custom fields.\nClick Save.\n\nTo use the new Section model, integrate with your codebase and then your teammates can create content entries in the Visual Editor.\n\nThe following video shows how to create an example Blog article Section model then shows how to use the new model to create a content entry:\n\nNext steps\n\nModels are a foundational part of Builder that you can customize to countless use cases. For more information on what you can do with models, refer to the following documentation:\n\nUsing Custom Fields: You can edit or create many kinds of custom fields on models with a variety of types.\nTargeting and Scheduling: Get the right content to the right people at the right time."
  },
  {
    "title": "Custom fields - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-fields",
    "html": "Custom Fields\n\nA field in Builder is a piece of data on a model. For example, the built-in Page model comes with two fields, a Title and a Description. These two fields help define what a Page is. Any time you make or edit any kind of model in Builder, you have the option of editing fields or adding custom fields.\n\nThe following video shows some example custom fields on the three kinds of models in Builder: the Page, Section, and Data models.\n\nPrerequisites\n\nTo get the most out of this document, make sure you've integrated Pages, Sections, or Data. The following tutorials give step-by-step instructions:\n\nIntegrate page building\n\nIntegrate section building\n\nIntegrate CMS data\n\nOverview of custom fields\n\nCustom fields are fields that you add to a model. You can add custom fields to models you create or to an existing model, such as the built-in Page model. All kinds of Builder models accept custom fields, so you can add the fields you need to Page models, Section models, and Data models.\n\nExamples of custom fields include data such as title, URL, name, timestamp, or any piece of data you want to define on a model. You define and specify aspects of your custom fields such as:\n\nType: There are many types available in Builder. Refer to Custom field types for more detail.\nLocalization: Translate fields according to region settings.\nDefault value: Pre-populate the custom fields you create.\nHelper text: Give your users a helpful hint about what to enter into the field.\nRequired: Make a field required or optional.\nEnum: Give users a predefined list of options.\nHidden: Make a given field hidden when editing content.\n\nThe following video shows where to find custom fields on a model, points out the available field Types, and then shows Page and Section custom fields in the Visual Editor's Option tab.\n\nAdding custom fields to a model\n\nYou can add custom fields to any model in Builder by doing the following:\n\nOpen the Model.\nClick the Edit Fields button.\nClick + New Field.\nName the field.\nChoose a Type.\nConfigure any other settings for the field and add additional fields as needed.\nScroll to the top and click Save.\n\nThe following video shows adding a custom field called name and date to a model.\n\nTo delete a custom field, click the x to the right of the field.\n\nUsing field values in your code\n\nTip: To interactively explore the data that is sent from the Builder API, check out the Builder API Explorer where you can query the Builder API using your actual data.\n\nCustom field types\n\nThe following table describes each Type in Builder along with an image of how each Type renders in the Builder UI.\n\nTip: This section covers the built-in types for models, but you can also make your own with plugins. For more information, see Making Your Own Plugins Overview.\n\nText\n\nText is analogous to the text type in HTML. With the Text type, you can specify minimum and maximum length.\n\nSelect\n\nCreates a select in content entries. With a select, teammates can choose from options you provide.\n\nLong Text\n\nLong Text accommodates multi-line text. With the Long Text type, you can specify minimum and maximum length.\n\nURL\n\nThe URL Type accommodates a URL, also known as a web address.\n\nFile\n\nUse the File Type to specify what kind(s) of file a user may upload to a custom field.\n\nNumber\n\nThe Number file type specifies that the value that the user enters must be a number.\n\nBoolean\n\nThe Boolean Type provides a toggle for a true/false setting.\n\nRich text/HTML\n\nThe Rick text/HTML Type provides a rich text interface with styling options and a toggle to write directly in HTML. Click the code icon, <>, at the upper right to toggle the HTML editor.\n\nDate\n\nUse the Date Type to accept a date from the user. When the user clicks on the input, a datepicker opens\n\nTimestamp\n\nUse the Timestamp Type to accept a date from the user. When the user clicks on the input, a date picker opens with a time picker. Though the Date and Timestamp Types appear similar, prefer Timestamp querying.\n\nColor\n\nUse Type Color to provide users with a color picker.\n\nList\n\nUse the List Type when for a series of items.\n\nReference\n\nUse the Reference type when you have Data entries that users choose from. For example, you could have a Blog Author custom field and when you click the Choose Entry button, all Blog Author Data entries display.\n\nMap﻿\n\nText\n\nUse the Map type when you want users to provide a collection of key-value pairs.\n\nJavaScript\n\nUse the JavaScript type so users can provide JavaScript code snippets.\n\nCode\n\nText\n\nUse the Code type for accepting JavaScript, HTML, CSS, or other type of code.\n\nTags\n\nUse the Tags type for adding Tags. The field is empty by default. To add tags, type the tag you'd like and press Enter. Click the x to delete a tag."
  },
  {
    "title": "Creating a Page - Builder.io",
    "url": "https://www.builder.io/c/docs/create-page",
    "html": "Popular Tutorials\n\n>\n\nHow to Create a Page\nCreating a Page\n\nThis tutorial is an introduction to creating a blank page, dragging in a template, previewing, and publishing. Perfect if you're new to Builder.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: < 1 minute\n\nPrerequisites\n\nTo get the most out of this tutorial, you should have the following:\n\nYou'll need a Builder account.\nAn evergreen browser; that is, a modern, up-to-date browser such as Google Chrome.\nCreating a page\nGo to the Content section of Builder.\nClick + New and select Page.\nName the page; for example, About. Builder auto generates a URL based on the name you provide, but you can customize the URL if you like.\nChoose a template or use the blank template and create a page from scratch.\nWhen your page is ready, click the Publish button.\nTo view your page, click the eyeball icon next to the Publish button and choose View current draft or View live page. If View Live Page isn't clickable, be sure that you've published.\n\nThe following video demonstrates creating and publishing a Page:\n\nTip: For step-by-step instructions on building a landing page inspired by Everlane, check out Making a Landing Page.\n\nExtra: Page models, or how Builder defines Pages\n\nBuilder comes with a built-in Page model for you to use. The Page model is what defines a Page. When you create a Page content entry, as this tutorial shows, Builder uses the Page model to determine the characteristics the Page content entry.\n\nThe default Page comes with a Title and Description field. If you need to edit the default Page model or create additional models, check out Intro to Models. Working with models is an ideal way for developers to define content paradigms that all team members can use.\n\nNext steps\n\nTo get the most out of Builder Pages, start by Integrating Pages with your codebase. In this way, the developer can focus on the code while non-coding team members have the freedom to create and edit as many Pages as they like."
  },
  {
    "title": "Input types for custom components - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-components-input-types#code-strong-list-strong-code",
    "html": "Input Types in Builder\n\nWhen you create custom components to use in Builder, there are two required inputs and a number of optional inputs to help you further customize your components. This document covers these inputs types in detail.\n\nThis document covers the following:\n\nRequired inputs: inputs you must use with your custom components\nOptional inputs for further customization: inputs that you can use to modify the look and behavior of your component in the Visual Editor\nInput type examples: definitions, code snippets, and a screenshot of input types in the Visual Editor\n\nTip: With plugins in Builder, you can create custom field types. For more information on using Builder's built-in plugins or creating your own, see Intro to Built-in Plugins and Making a Plugin.\n\nPrerequisites\n\nTo get the most out of this document, you should be familiar with Integrating Your Custom Components with Builder.\n\nRequired inputs\n\nWhen you register a component with Builder, you must include the name and type inputs as in the following table:\n\nName\tRequired\tDescription\n\nname\n\n\t\n\nYes\n\n\t\n\nA unique name for this input that should match the equivalent prop name on your React component.\n\n\n\n\ntype\n\n\t\n\nYes\n\n\t\n\nTypes correlate to what editing UI is appropriate to edit this field. Common types include:\n\n'string'\n'number'\n'boolean'\n'longText' // String type but with a multiline text field editor\n'richText' // Displays a rich text editor and provides the value as html\n'file' // Uploads a file and provides the value as a url string\n'color'\n'date'\n'email'\n'object'\n'list'\n'reference' // displays a content entry picker to reference\nOptional inputs for further customization\n\nYou can use additional inputs to further customize your components in Builder. The following table contains Builder's optional inputs.\n\nName\tType\tDescription\n\nadvanced\n\n\t\n\nBoolean\n\n\t\n\nSet to true to put this component under the Show More section of the Options tab. Useful for things that are advanced or rarely used and don't need to be prominent.\n\n\n\n\nallowedFileTypes\n\n\t\n\narray\n\n\t\n\nFor the file input type, specify what types of files users can upload. This is an array that takes content-type files such as:\n\nallowedFileTypes: ['jpeg', 'png', 'mp4', 'gif', 'pdf', 'svg']\n\n\n\ndefaultValue\n\n\t\n\nany\n\n\t\n\nUse for showing an example value in the input form when creating a new instance of this component, to users understand its purpose.\n\n\n\n\nenum\n\n\t\n\narray\n\n\t\n\nFor any text-based field type, you can specify a set of options that the field can use.\n\nenum: ['option 1', 'option 2']\n\n\n\nfriendlyName\n\n\t\n\nstring\n\n\t\n\nThe name the Visual Editor displays for the input.\n\nfriendlyName: 'Open link in new tab',\n\n\n\nhelperText\n\n\t\n\nstring\n\n\t\n\nProvide text to help the end user know how to fill in this input. Displays below the input.\n\nhelperText: 'Some helpful description about how to use this input'\n\n\n\nmodel\n\n\t\n\nstring\n\n\t\n\nUse optionally with inputs of type reference. Restricts the content entry picker to a specific model by name.\n\nBuilder.registerComponent(ProductBox, {\n  name: 'ProductBox',\n  inputs: [{\n    name: 'metafields',\n    type: 'reference',\n    model: 'product-metafields'\n }]\n})\n\n\n\n\n\nonChange\n\n\t\n\nFunction\n\n\t\n\nProvide a function that is called whenever the value of the input is updated. Useful for more complex validation than regex or running custom logic when an input value updates.\n\n// Example of how to validate and limit the length \n// of a list input called myList\n// \n// Note: the function is stringified and evaluated in \n// the context of the parent window, \n// so don’t try to use any references to other \n// variables or functions that you might have \n// within the file that your component defined\nonChange: (options) => {\n  if (options.get('myList').length > 6) {\n    options.set('myList', options.get('myList').slice(0, 6))\n    alert('maximum items is 6, delete items to continue')\n  }\n}\n\n\n\n\nregex\n\n\t\n\nobject\n\n\t\n\nFor any input that results in a string value you can provide a regex to validate user input.\n\n regex: {\n    // pattern to test; such as \"^\\/[a-z]$\" \n    pattern: \"^\\/[a-z]$\",\n    // flags for the RegExp constructor; for example, \"gi\"  */\n    options: \"g\",\n    // message to display to end-users if the regex fails\n    message: \"You must use a relative url starting with '/...' \"\n  }\n\n\n\n\nshowIf\n\n\t\n\nFunction\n\n\t\n\nShow and hide the input dynamically.\n\noptions is an object with the current options, that is, values from inputs, that are set on the component.\nparent is the component definition,\nparentElements is an array of all the parent elements of where the component is placed\n\nFor example, to only show the input if the component is inside of a Columns component has the input myInputOption set to true, you could write a function as follows:\n\nshowIf: (options, parent, parentElements) => {\n  return options.get('myInputOption') \n    && parentElements.some(el => \n      el && el.component && el.component.name === 'Columns');\n}\n\n\n\nUse the state of other inputs via options to hide or show inputs that depend on one another. For example, you could show an input that opens a link in a new tab only if a link is present, instead of always showing all inputs.\n\n\n\n\nsubFields\n\n\t\n\nInput[]\n\n\t\n\nIf the input type is list , you must include the subFields property that is a list of inputs, with this same schema, for each list item.\n\n{\n      name: 'reviews',\n      type: 'list',\n      defaultValue: [ \n            { reviewText: 'hello' \n     }],\n      subFields: [\n\t{\n          name: 'reviewText',\n          type: 'string',\n          defaultValue: '\"You are \n          the best\"',\n        },\n        {\n          name: 'reviewAuthor',\n          type: 'string',\n          defaultValue: 'Jane Smith',\n        },\n        {\n          name: 'image',\n          type: 'file',\n          allowedFileTypes: ['jpeg', 'jpg', 'png', 'svg'],\n          required: true,\n          defaultValue:\n         'https://cdn.builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d',\n        },\n      ],\n    }\n\n\n\n\nlocalized\n\n\t\n\nboolean\n\n\t\n\nYou can mark any input type with localized to get a separate value for each of the locales configured on your space.\n\n{\n  name: 'title',\n  type: 'text',\n  localized: true,\n}\n\nInput type examples\n\nThis section provides examples of the effects of input types in Builder and covers the following:\n\nInput type name\nDefinition of input type\nAlias/alternative input type you can use instead of the given input type\nScreenshot of input type's effect in Builder's Visual Editor\n\nTip: This section covers the built-in types for custom components, but you can also make your own with plugins. For more information, see Making Your Own Plugins Overview.\n\nboolean\n\nAn input field taking true or false.\n\n  {\n    name: 'darkMode',\n    type: 'boolean',\n    defaultValue: true,\n  }\n\ncolor\n\nProvides a color value, in hex or rgb, to a component.\n\n {\n    name: 'backgroundColor',\n    type: 'color',\n    defaultValue: '#fafafafa',\n  }\n\ndate\n\nTakes same formats as the date constructor for Javascript.\n\n  {\n    name: 'event',\n    type: 'date',\n    defaultValue: 'December 17, 1995 03:24:00', \n  }\n\nemail\n\nCreates an email value for a component.\n\n  {\n    name: 'signup',\n    type: 'email',\n    defaultValue: 'noreply@email.com'\n  }\n\nfile\n\nUploads a file and provides the value as a URL string. Refer to allowedFileTypes for details.\n\n  { \n    name: 'image',\n    type: 'file', \n    allowedFileTypes: ['jpeg', 'png'] \n  }\n\nlist\n\nA collection of items.\n\nAlias: array\n\n{\n      name: 'reviews',\n      type: 'list',\n      defaultValue: [ \n            { reviewText: 'hello' \n     }],\n      subFields: [\n\t{\n          name: 'reviewText',\n          type: 'string',\n          defaultValue: '\"You are \n          the best\"',\n        },\n        {\n          name: 'reviewAuthor',\n          type: 'string',\n          defaultValue: 'Jane Smith',\n        },\n        {\n          name: 'image',\n          type: 'file',\n          allowedFileTypes: ['jpeg', 'jpg', 'png', 'svg'],\n          required: true,\n          defaultValue:\n         'https://cdn.builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d',\n        },\n      ],\n    }\n\n\nTip: list requires the defaultValue option.\n\nlocalized text\n\nA localized text input is a key/value object where the keys are the locales configured in your space. For more information, see Introduction to Localization with Builder.\n\n{\n  name: 'title',\n  type: 'text',\n  localized: true,\n}\n\nlongText\n\nSame as string type but with a multi-line text field editor.\n\n  {\n    name: 'description',\n    type: 'longText',\n    defaultValue: 'Builder is the first and only headless CMS with a powerful \n    drag-and-drop visual editor that lets you build, \n    optimize, and measure digital experiences with speed and flexibility'\n  }\n\n\nTip: If the text is to be formatted, use richText.\n\nnumber\n\nSpecifies that an input field expects a number.\n\n  {\n    name: 'amount',\n    type: 'number',\n    defaultValue: 20,\n  }\n\nobject\n\nA set of specific names and values.\n\n  {\n      name: 'Carousel',\n      type: 'object',\n      defaultValue: {\n         variant: 'primary'\n      },\n      subFields: [\n        {\n          name: 'text',\n          type: 'string',\n          required: true,\n        },\n        {\n          name: 'url',\n          type: 'url',\n          required: true,\n        },\n        {\n          name: 'variant',\n          type: 'string',\n          defaultValue: 'primary',\n          enum: ['primary', 'info', 'dark', 'light', 'warning'],\n        },\n      ],\n    }\n\n\nIf you have large objects with multiple fields:\n\nUse folded so that multiple inputs are rendered collapsed to preserve space on the screen.\nUse keysHelperText to provide helpful copy to the user.\n    {\n      name: 'HugeObject',\n      type: 'object',\n      folded: true,\n      keysHelperText: 'Pick a property to edit',\n      helperText: 'Edit this enormous object',\n      // Example of 30 subfields\n      subFields: Array.from({ length: 30 }).map((_, index) => {\n        return {\n          // Type can be whatever you need\n          type: index % 2 === 0 ? 'text' : 'file',\n          allowedFileTypes: ['jpeg', 'jpg', 'png', 'svg'],\n          name: `prop${index}`,\n          helperText: `The helper text of prop ${index}`,\n        }\n      })\n    },\n\n\nTip: object requires thedefaultValue option.\n\nrichText\n\nDisplays a rich text editor and provides the value as HTML\n\nAlias: html\n\n  {\n    name: 'description',\n    type: 'richText',\n    defaultValue: '<b>This text is bold</b>'\n  }\n\nstring\n\nAny text, usually short in length and unformatted.\n\nAlias: text\n\n  {\n    name: 'buttonText',\n    type: 'string',\n    defaultValue: 'Click',\n  }\n\nTags\n\nTags, usually short text for adding tags to your content entries.\n\n  {\n    name: 'blogTags',\n    type: 'Tags'\n  }\n\nAn example using icons\n\nIf you have a design system that features an icon set, you can use a custom component that takes an icon name as input. In this way, you can manage and distribute your icons across your app. Register your icon component as below:\n\n Builder.registerComponent(Icon, {\n    name: 'Icon',\n    inputs: [{ name: 'icon', type: 'text', enum: ['error', 'warning' ..] }]\n  },\n\nWhat's next\n\nEvery use case is unique. If you need further customization, you can add custom types with plugins."
  },
  {
    "title": "Start Building - Builder.io",
    "url": "https://www.builder.io/c/docs/start-building",
    "html": "LET'S BUILD TOGETHER\n\nPopular Tutorials\n\nThe documentation within Building Content features the Builder Visual Editor, an intuitive drag-and-drop editor where you can quickly build pages, sections, and leverage your data.\n\nFEATURED GUIDES\n\nMake a Landing Page\n\nBecome a Responsive Design Pro\n\nBuilder for Shopify\n\nLearn about Blocks\n\nTour the Visual Editor\n\nReuse Blocks to Work Smarter\n\nPOPULAR VIDEO TUTORIALS\n\nThe following collection of how-to videos walks you step-by-step through some of our customers' most requested project types.\n\nHow to Create a Page\n\nCreate a page. Perfect if youʻre new to Builder.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: < 1 minute\n\nHow to Make a Hero Block\n\nCreate a full-width image that features a button and copy.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 3 minutes\n\nHow to Batch Upload Images\n\nUpload multiple pictures at a time into Builder.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 1 minute\n\nHow to Make a Multi-column Section\n\nCreate a section with multiple images in columns that sit side-by-side at larger screen widths and stack on smaller screens.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 2 minutes\n\nCreate a Full-width Two Column Section\n\nCreate a section that spans the whole viewport with a pull quote on one side and an image on the other.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 4 minutes\n\nHow to Make an Announcement Bar\n\nCreate a bar that spans the whole viewport with an announcement.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 1.5 minutes\n\nHow to Make a Full-Width Carousel\n\nCreate a section with multiple images that you can scroll through horizontally.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 2.5 minutes\n\nHow to Make a Footer\n\nCreate a footer that spans the viewport, contains a logo, and columns of links. These guidelines meet most use cases.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 10 minutes\n\nHow to Make a Footer Symbol\n\nCreate a footer Symbol with customizable inputs. If youʻre new to Symbols, be sure to check out Reusing Blocks first.\n\nSkill set: Advanced\n\nArea: UI only\n\nLength: 5 minutes\n\nCreate a Section with a Changeable Background\n\nMake a section with a background that changes when you hover over certain configured areas. Includes:\n\ninteractive example, also known as a fiddle\na preview so you can see the end result\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 17.5 minutes\n\nHow to Make a Grid Layout\n\nCreate a responsive grid layout with techniques that you can adapt to different designs.\n\nSkill set: Intermediate\n\nArea: UI only\n\nLength: 10 minutes\n\nMixing Content from Different Models\n\nLearn how to embed a section that displays data model content inside of a Next.js page. Includes:\n\nOverview of the video's contents\nNext.js and Shopify starter with Shopify plugin setup instructions\nCode for this tutorial\nLive demo\n\nSkill set: Familiar with code\n\nArea: UI and code\n\nLength: 33 minutes\n\nBuild a Page with Templates\n\nUsing a pre-built Template, you can create your first Builder page quickly. Follow this tutorial to create your page in four steps. Then, have fun customizing your page.\n\nSkill set: Basic\n\nArea: UI only\n\nVideo coming soon\n\nGet Up and Running with the Visual Editor\n\nLearn your way around the Visual Editor by creating a page, using blocks, and styling your creation in this in-depth half-hour tutorial.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 29 minutes\n\nCreate a Site Theme\n\nChange site colors instantly with Data models that feature color pickers. Teammates can iterate on color palettes and make as many as they need.\n\nSkill set: Intermediate\n\nArea: UI only\n\nLength: 3 minutes\n\nSet Up Server-side Redirects with Next.js\n\nUse a Builder Data model with your Next.js app to redirect site traffic from one URL to another.\n\nSkill set: Familiar with code\n\nArea: UI and code\n\nLength: 2 mins\n\nSet Up and Use Product Data\n\nUse a Builder Data model to create Product Data and use that Data in the Visual Editor with data binding.\n\nSkill set: Intermediate\n\nArea: UI\n\nLength: 4 mins\n\nMake a Landing Page Series\n\nFollow this six-step tutorial to make a responsive landing page.\n\nSkill set: Basic\n\nArea: UI\n\nLength: Six 5-minute videos\n\nCreate a Countdown Timer Hero\n\nUse a built-in Builder template or custom code to create a countdown hero.\n\nSkill set: Basic OR familiar with code\n\nArea: UI or code\n\nLength: 21 sec for built-in template.\n\nHow to Build Webinar Series\n\nDive into some of Builder's most in-demand features with our on-staff experts.\n\nSkill set: All\n\nArea: All\n\nLength: Varies by webinar"
  },
  {
    "title": "Getting started with the visual editor in Builder.io - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/page-building",
    "html": "Popular Tutorials\n\n>\n\nGet Up and Running in the Visual Editor\nGet Up and Running in the Visual Editor\n\nThis video walks through all the features of the Visual Editor and demonstrates how to perform common tasks.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 29 minutes\n\nPrerequisites\nYouʻll need a Builder account.\nAn evergreen browser; that is, a modern, up-to-date browser such as Google Chrome.\n\nCreate a page\n\nColumns\n\nImage Sizing\n\nInsert tab\n\nOptions tab\n\nStyle tab\n\nStyling\n\nAlignment\n\nMargin & Padding\n\nLayers tab\n\nCopy & paste\n\nX-Ray Mode\n\nBox block\n\nCustom CSS properties\n\nCopy & paste style\n\nMulti selection\n\nGrouping\n\nDuplicate layers\n\nResponsive Mobile Styling\n\nChild layout options\n\nHiding layers per device"
  },
  {
    "title": "Learning - Builder.io",
    "url": "https://www.builder.io/c/docs/learning",
    "html": "Learning Builder\n\nIf you're new to Builder and want to learn your way around, the Builder documentation has articles that cover the basics to get you started. The following categories are based on Builder roles and permissions.\n\nTip: If you're just starting out with Builder, check out Key Concepts first for context on how Builder works and an intro to common terms we use.\n\nContributors and Editors\n\nBecause Contributors don't edit layouts, they can focus on content such as copy and images. To get familiar with Builder, get up and running with our recommended learning path:\n\n1\n\nTour the Builder UI\n\nRecommended docs:\n\nLeft Sidebar\nVisual Editor\nTopbar\n\n2\n\nLearn how to create and edit content\n\nRecommended docs:\n\nBlock Types in Builder\nWorking with Images\nCreating Links\nFor Editors: Using Layers\n\n3\n\nGet acquainted with Builder workflows\n\nRecommended docs:\n\nRequest to Publish\nEditing Your Site Using the Builder Chrome Extension\nAdding Comments to Your Content\nDesigner\n\nTo get off to a good start, Designers should get acquainted with the Builder UI, its features made just for Designers, and how to apply the principles of responsive design in the Visual Editor.\n\nTip: To import your designs from Figma and automatically create responsive designs in Builder, check out Visual Copilot, Builder's workflow for going from a Figma file to Builder and even generating great code in moments.\n\n1\n\nLearn about responsive design\n\nRecommended docs:\n\nIntro to Responsive Design\nThe Box Model\nHow Width Affects Layout\nMargin and Padding\nUsing Breakpoints to Build Responsively\n\n2\n\nGet to know the UI\n\nRecommended docs:\n\nMake a Landing Page\nImporting Figma Designs\nUsing Alignment for Layout\nBest Practices\nAdmin\n\nIf you're an Admin, you might have many varied responsibilities, while still maintaining access and permissions in Builder for your team.\n\n1\n\nLearn about managing your account and users\n\nRecommended docs:\n\nRoles and Permissions\nUnderstanding Organizations\nAccessing Your Invoices\nUnderstanding Pageviews\n\nTip: If you need to create web experiences, make sure to read the documents under Designer, in the previous section.\n\nDeveloper\n\nDevelopers have their own section of the documentation. To get started coding with Builder, check out Developing with Builder, which highlights some of the most frequently used documentation tailor-made for developers.\n\nNext Steps\n\nThis document laid out a roadmap to help you get the information you need to get up and running with Builder. The next step is to play with Builder and start creating with Builder's Popular Tutorials."
  },
  {
    "title": "Builder.io developer docs - Builder.io",
    "url": "https://www.builder.io/c/docs/developers?_host=www.builder.io",
    "html": "LET'S BUILD TOGETHER\n\nDeveloping with Builder\n\nGet building with Builder's Visual Headless CMS!\n\nAutomatic Integration with Devtools\n\nINTEGRATE WITH YOUR CODE\n\nIntegrate Page Building\n\nIntegrate Section Building\n\nIntegrate Structured Data\n\nWhich should I use?\nBuilder Blueprints\n\nBlueprints are quick references for common use cases with Builder.\n\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nRequest a Blueprint\n\nDIVE DEEPER\n\nIntegrate Custom Components\n\nLearn About Content Models\n\nExtend Builder with Plugins\n\nEXPLORE THE BUILDER PLAYGROUND:\n\nExplore a Builder Integration in Your Browser\n\nPOPULAR DEVELOPER DOCS\n\nHow Builder Works: Technical Overview\n\nAPI Documentation\n\nGenerating Code with Visual Copilot\n\nIntegrate Symbols\n\nWe ❤️ open source\n\nBuilder\n\nBuilder SDKs, plugins, examples, and more\n\nQwik\n\nResumable framework for building instant-on web apps with great time-to-interactive\n\nMitosis\n\nUniversal components compiler. Write components once, run everywhere.\n\nPartytown\n\nRelocate resource intensive 3rd - party scripts off the main thread and into a web worker.\n\nFigma / HTML\n\nConvert Figma designs to HTML, CSS, React, Vue and more!"
  },
  {
    "title": "Intro to Plugins - Builder.io",
    "url": "https://www.builder.io/c/docs/plugins-intro?_host=www.builder.io",
    "html": "Intro to Plugins\n\nPlugins for Builder help you integrate a third-party service and customize nearly every part of Builder's Visual Editor and models.\n\nPlugins are a powerful tool for customizing the Visual Editor to make it easier for users to manage and create content.\n\nPlugins help you:\n\nCreate custom types.\nExtend the Visual Editor's user interface.\nTypes of Plugins\n\nThere are three types of plugins in Builder:\n\nBuilt-in plugins: On the Integrations page in Builder, use these ready-made plugins to help you integrate with e-commerce platforms and external data providers with minimal configuration. All plans can use the built-in plugins.\nPublic plugins: You code these and then submit a PR to add to the built-in integrations. Public plugins become part of the Builder ecosystem and when they're merged, Builder.io's engineers help maintain them. All plans can submit public plugins.\nPrivate plugins: You code these but they do not become part of the Builder ecosystem because you maintain them privately. Private plugins are available on all Enterprise plans while plugins with your own branding are available as an add-on for Enterprise customers.\n\nThe diagram below shows these points in a table form:\n\nUse cases for plugins\nBuilt-in Plugins\n\nUse built-in plugins for integrating your Builder account space with with e-commerce platforms and external data providers.\n\nBuilt-in plugins include everything in Integrations, such as:\n\nBigCommerce\nCommercetools\nCommerce.js\nFigma\nPartytown + Shopify\nSmartling\n\nFor a full list, see Integrations and for further documentation, refer to Overview of Built-in Plugins.\n\nPublic Plugins\n\nUse public plugins when you want to customize the Builder Visual Editor UI and you are willing to share your plugin with others. Common use cases for public plugins are:\n\nAdding your own custom types for a model, such as a rich text editor\nCustomizing the Builder Visual Editor\nTargeting content based on what users have in their cart\nCustomizing Symbol inputs\nCreating an action plugin to trigger events in Google Analytics\nAdding an image management plugin\nIntegrating with Shopify\n\nFor more details and instructions on creating plugins, see Extending the Builder UI with Plugins and Making a Plugin.\n\nPrivate Plugins\n\nCreate private plugins when you have needs specific to your company that you need to keep accessible only within your organization. Examples include:\n\nCustomizing the look and feel of Builder with your own branding\nAdding custom flows for creating e-mail campaigns\nNext Steps\n\nUsing and creating plugins opens up countless possibilities. For more info on plugins, check out the following documents:\n\nOverview of Built-in Plugins—an introduction to the plugins already available in Builder.\nMaking a Plugin—a tutorial on how to create your own plugin.\nBuilder.io plugin examples on GitHub"
  },
  {
    "title": "Builder.io developer docs - Builder.io",
    "url": "https://www.builder.io/c/docs/api-intro",
    "html": "Builder API Documentation\n\nBuilder's APIs gives you a wide variety of ways to leverage content and data quickly and efficiently.\n\nContent API\n\nMake requests to retrieve data about any of your Builder models.\n\nGraphQL API\n\nQuery your data by targeting attributes and custom fields.\n\nHTML API\n\nUse Builder to pre-render your components server-side.\n\nQwik API\n\nBuilder's ultra performance optimized alternative to the HTML API.\n\nWrite API\n\nCreate, delete, and update content in Builder.\n\nAdmin API\n\nA GraphQL API for back-end servers or trusted partners.\n\nWebhooks\n\nListen for content changes that should trigger workflows.\n\nWeb components API\n\nDisplay dynamic Builder content on any tech stack."
  },
  {
    "title": "Intro to Integrating Custom Components - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-components-intro",
    "html": "Integrating Custom Components\n\nYou can expand on Builder's selection of built-in blocks by registering components from your codebase with Builder. Then, teammates can drag and drop your components within Builder's Visual Editor just like any other block.\n\nYou can use components you code yourself or third-party components with Builder.\n\nGet Started\n\nUsing your custom components in Builder's Visual Editor is a minimal process:\n\nStep 1: Register Custom Components with Builder, which requires minimal code setup.\nLearn to register your components\nStep 2: Use your component in the Visual Editor by dragging and dropping your component like any other block and customizing it in the Visual Editor.\nUse cases for integrating custom components\n\nCustom components are ideal when you want to accomplish goals such as:\n\nAdding unique functionality to your site for special use cases\nSystematizing design and content patterns\nStandardizing your design system with custom components-only mode, which makes only your custom components available for use in the Visual Editor\nCustomizing blocks\nOverriding built-in blocks\nFurthering your customized experience\n\nAfter you've set up custom components in Builder you can customize your team's experience even further by:\n\nUsing Builder Blocks in Custom Components\nOverriding Built-in Components\nVersioning Custom Components\n\nNext steps\n\nTo get started using your custom components in Builder, head over to Registering Custom Components with Builder."
  },
  {
    "title": "Using Widgets - Builder.io",
    "url": "https://www.builder.io/c/docs/widgets",
    "html": "Using Widgets\n\nBuilder widgets streamline the development process so you can focus on creating engaging user interfaces.\n\nWith these widgets, you can create interactive elements such as collapsible sections, image sliders, and tabbed content, enhancing the appeal and functionality of your content.\n\nTip: Widgets work only with the Gen 1 React SDK. For more detail on the Builder SDKs, read The Builder SDKs.\n\nPrerequisites\n\nTo get the most out of this document, you should already have the following:\n\nAn app already Integrated with Builder\nInstalling widgets\n\nIn your project, install the Builder Widgets package by running the following npm install in the terminal:\n\nnpm install @builder.io/widgets\n\nIn your React application, import the Builder Widgets package to register the widgets:\n\nimport '@builder.io/widgets';\n\nInclude this import statement wherever you render a <BuilderComponent /> in your code. This registers the widgets and makes them available for use in the Visual Editor, as well as ensures proper rendering during both client-side and server-side rendering.\n\nUpdating widgets\n\nIf you're already using widgets, you can keep them up-to-date with:\n\nnpm install @builder.io/widgets@latest\n\nOr, if you're using yarn:\n\nyarn add @builder.io/widgets@latest\nLazy loading widgets\n\nTo improve performance, you can lazy load the Builder widgets package by asynchronously importing only the widgets used in Builder content. This means that widgets only load when needed, which helps you streamline user experience (UX) and more efficiently use resources.\n\nIn Next.js\n\nInstead of importing the root package synchronously, use the following import statement in Next.js:\n\nimport '@builder.io/widgets/dist/lib/builder-widgets-async';\n\nThis enables lazy loading of the widgets, which ensures they are loaded only as needed.\n\nIn other frameworks\n\nFor other frameworks, explicitly lazy load the widget components by registering them with your chosen lazy loading library.\n\nThe following example uses Loadable, the React code-splitting library:\n\nimport { Builder } from '@builder.io/react';\nimport { accordionConfig } from '@builder.io/widgets/dist/lib/components/Accordion.config';\nimport loadable from '@loadable/component';\n\nBuilder.registerComponent(\n  loadable(() =>\n    import('@builder.io/widgets/dist/lib/components/Accordion').then(mod => mod.AccordionComponent)\n  ),\n  accordionConfig\n);\n\n\nIn this example, the Accordion component from the Builder Widgets package is registered using Loadable's lazy loading functionality. The component is loaded only when it's used in your content.\n\nIf your framework supports Suspense, you can use this technique in a similar manner as Loadable to lazy load the Builder Widgets components when needed.\n\nUsing widgets\n\nAfter installing widgets, find them in the Layouts section of the Insert tab.\n\nTip: The Layouts section only displays if you've installed and imported the Widgets package or are using the Fallback Editor or fiddle.\n\nAccordion\n\nThe Accordion component renders an accordion-style UI. It accepts an array of items, each consisting of a title and a detail section. Users can click on the title to expand and collapse the corresponding detail section.\n\nThe component supports options such as displaying as a grid, allowing only one item to be open at a time, and customizing the layout.\n\nTo use the Accordion:\n\nInstall the Widgets package.\nGo to the Insert tab > Layouts.\nDrag in the Accordion widget.\nClick Edit to adjust settings.\n\nThe following video shows dragging in an Accordion widget, editing some of the settings in the Accordion's Edit dialogue. Just as with other blocks, you can apply styles to get the look and feel you want in your Accordion.\n\nCarousel\n\nThe Carousel component renders interactive carousels or sliders using the react-slick library. It accepts an array of slides and supports options like autoplay, navigation buttons, responsive settings, and customization of slide content and styles.\n\nThis component can render static content as well as dynamic content. With its customizable settings and seamless integration, the Carousel component provides an intuitive way to showcase and navigate through a collection of content.\n\nTo use the Carousel:\n\nInstall the Widgets package.\nGo to the Insert tab > Layouts.\nDrag in the Carousel widget.\nClick Edit to adjust settings.\n\nThe following video shows dragging a Carousel widget, editing some of the settings in the Carousel's Edit dialogue, and clicking through the slides. Just as with other blocks, you can apply styles to get the look and feel you want in your Carousel.\n\nTabs\n\nTabs provide a convenient way to organize and present multiple sections of content within a limited space. It accepts an array of tabs, each consisting of a label and corresponding content. Users can switch between tabs by clicking on the labels, and the active tab's content is displayed.\n\nTo use the Tabs component:\n\nInstall the Widgets package.\nGo to the Insert tab > Layouts.\nDrag in the Tabs widget.\nClick Edit to adjust settings.\n\nThe component offers additional features like setting a default active tab, collapsible tabs to toggle their visibility, customizable tab header layout options, and the ability to style the active tab to distinguish it from others.\n\nThe following video shows dragging in the Tabs widget and editing its settings:\n\nWhat's next\n\nFor more detail on the available widgets, check out the code on GitHub."
  },
  {
    "title": "Intro to Models - Builder.io",
    "url": "https://www.builder.io/c/docs/models-intro",
    "html": "Intro to Models\n\nA model is a paradigm—a pattern for something else. Builder offers three kinds of models that define content types:\n\nA Page model: The basis for a full Page built in Builder\nA Section model: The basis for a part of a Page.\nA Data model: Gives structure to a collection of data that you render as you choose.\n\nYou use these models as the defining source for content entries. Like a rubber stamp, the model provides a basic foundation. Each time you use a rubber stamp, the fundamental characteristics are the same but you might use the resulting image differently by varying other factors such as color and surface.\n\nSimilarly, with models in Builder you can define what a Page, Section, or collection of Data is and use those models over and over to build your site and populate it with content. And you can create as many models as you like.\n\nThe following graphic compares Builder models. Follow the Try it out link to play with a demo of each.\n\nVisual Pages\n\nTry out Pages\n\nUse Pages to manage entire pages, such as:\n\nMarketing and content pages\nLanding pages\n\nVisual Sections\n\nTry out Sections\n\nUse Sections to maintain parts of your site or app, such as:\n\nAnnouncement bars\nProduct editorial\nCollection heroes\nCart upsells\n\nStructured Data\n\nTry out Data\n\nUse Structured Data to manage structured data, such as:\n\nNavigation links\nProduct details\nBlog post authors\n\nAll models in Builder support:\n\nA/B Testing: Test different versions of your content.\nTargeting and Scheduling: Deliver the right content to the right people at the right time.\nRoles and permissions: Admins and Developers can edit models by default, but you can also specify permissions by content model using Custom Roles.\n\nThis means that you can granularly grant permissions, test, and precisely deliver content.\n\nExplore common integration patterns:\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nUsing models to build your app\n\nWhen you use models to build your app, you can create exactly the Pages, Sections, and Data specific to your use case. With your integrated app, you can, for example, use your Sections in the Pages you choose as well as reuse Data wherever you need it.\n\nExamples of models include:\n\nA seasonal announcement banner placed on a page between certain dates.\nMarketing tile targeting a specific persona on certain pages.\nBlog authors whose profiles you want to link to from different parts of your site.\n\nBy creating models for each type of content you need, you can ensure consistency while making the process of iterating more efficient. The developer creates and integrates a model and non-developer teammates can use that model to create as many content entries as they need.\n\nThe following diagram shows a typical Builder documentation page. The left side navigation is a Section, the body of the document is a Page, and the font colors are stored in a Data content entry.\n\nWhat's next\n\nTo get the most out of Builder Models, be sure to integrate and learn about each type of model:\n\nPage Model: Learn what a Page model is and how to use one.\nIntegrating Pages: Integrate Page building with your code base so non-dev team members can create as many pages as they need and developers can focus on code.\nSection Models: Learn about Section use cases and how to use Sections in your app.\nIntegrating Sections: Integrate Builder Sections with your codebase so teammates can create and use Sections wherever they need them.\nData Models: Give shape to data and learn how to query that data.\nIntegrating CMS Data: Integrate data to create reusable data across your site.\nCustom Fields: Learn about the wide array of options available for shaping your models."
  },
  {
    "title": "Builder for Enterprise - Builder.io",
    "url": "https://www.builder.io/c/docs/enterprise-hub",
    "html": "Builder for Enterprise\n\nOn an Enterprise plan, you have access to top-notch Builder features and services. And with add-ons only available to Enterprise customers, you can leverage Builder to deeply refine experiences for your customers.\n\nGUIDES FOR ENTERPRISE FEATURES\n\nEnterprise customers have access to an array of features, which include:\n\nPremium Support SLA\n\nGuaranteed 99.9% uptime and support response times\n\nCustom Roles and Permissions\n\nGranularly determine user access and permissions\n\nEnvironments\n\nCreate environments such as QA and Prod\n\nWorkflows and Rules\n\nImprove collaboration and quality\n\nSINGLE-SIGN ON\n\nSSO with Okta\n\nConnect Okta to Builder for Single Sign-On\n\nSSO with Google Workspace\n\nConnect Google Workspace to Builder for Single Sign-On\n\nSSO with Azure\n\nConnect Azure to Builder for Single Sign-On\n\nPOWER FEATURES\n\nUsing Templates Across Spaces\n\nShare templates in all of your Spaces\n\nRequest to Publish\n\nUsers can request that content go live\n\nSmart Targeting\n\nCurate your targeting attributes\n\nWhite-labeling\n\nThoroughly customize Builder\n\nCreate a Private Plugins\n\nMeet your specific use cases with private plugins\n\nUsing Custom Dashboards\n\nMeet your specific use cases with private plugins\n\nCopy an Entire Space\n\nDuplicate a whole Space in your Organization\n\nView Organization Insights\n\nView most active users by Space\n\nCustomize dashboards programmatically\n\nUse your own SQL queries for displaying metrics\n\nEmbedded Apps\n\nDeeply customize the Builder user interface\n\nContributor Role\n\nGive users limited access to update content\n\nSome of these features are add-ons. If you would like to learn more about Builder's add-on Enterprise features, contact your Account Executive, email sales@builder.io, or reach out to us through our contact form."
  },
  {
    "title": "Resources for integrations - Builder.io",
    "url": "https://www.builder.io/c/docs/integrating-resources",
    "html": "Resources for Integrating Frameworks\n\nThis page is a collection of helpful links to extra resources on integrating a number of frameworks with Builder.\n\nFor a complete list of Builder framework examples, see the examples directory on the Builder GitHub repo.\n\nThe GitHub logo indicates that the resource is available on GitHub. Otherwise, the resource is a Builder blog post or document.\n\nAngular\n\nGatsby\n\niOS and Android\n\nMaterial UI\n\nNext.js step-by-step blog post\n\nNext.js examples\n\nNode.js and Express\n\nReact Native\n\nReact API Reference\n\nReact: Triggering Custom Actions\n\nReact Code Example: multiple pages\n\nReact Code Example: multi-page funnel\n\nReact Code Example: design system\n\nRuby on Rails\n\nSalesforce\n\nShopify Hydrogen\n\nStorybook\n\nSvelte (Sveltekit)\n\nVanilla JS\n\nVue 2 (Nuxt 2)\n\nVue 2 (Vue Storefront)\n\nVue 3\n\nWordpress\n\nOther frameworks\n\nBuilder is API-first and designed to work alongside other APIs, including proprietary frameworks. Depending on your use case, you can also consider using Builder's Write API or Making Your Own Plugin."
  },
  {
    "title": "SDK Comparison - Builder.io",
    "url": "https://www.builder.io/c/docs/sdk-comparison",
    "html": "SDK Comparison\n\nIf you want to use the latest, second-generation Builder SDKs, understanding how the imports might have changed for your framework can help you get started smoothly so you can leverage the many improvements and updates.\n\nTip: Currently, the React Gen 2 SDK is in beta. We recommend that you use the Gen 1 SDK for React and React-based frameworks.\n\nComparison: Gen 1 and Gen 2\n\nAt Builder, we refer to the two sets of SDKs as Gen 1 and Gen 2:\n\nGen 1: first generation of the Builder SDKs\nGen 2: second generation of the Builder SDKs\n\nUse the table below so that you reference the SDK for your framework correctly.\n\nFramework\tGen 1\tGen 2\n\nQwik\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-qwik\n\n\n\n\nReact*\n\n\t\n\nstable\n\n@builder.io/react\n\n\t\n\nin beta\n\n@builder.io/sdk-react\n\n\n\n\nNext.js\n\n\t\n\nstable\n\n@builder.io/react\n\n\t\n\nin beta\n\n@builder.io/sdk-react-nextjs\n\n\n\n\nVue**\n\n\t\n\nstable\n\n@builder.io/vue\n\n\t\n\nin beta\n\n@builder.io/sdk-vue/vue2\n\n@builder.io/sdk-vue/vue3\n\nThough Vue Gen 2 is in beta, this is the recommended SDK.\n\n\n\n\nSvelte\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-svelte\n\n\n\n\nSolid\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-solid\n\n\n\n\nReact Native\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-react-native\n\n\n\n\nAngular\n\n\t\n\nstable\n\n@builder.io/angular\n\n\t\n\nn/a\n\n*Includes React-based frameworks such as Remix, Hydrogen, Gatsby, Next.js, and App Router.\n\n**Includes Nuxt.\n\nImporting the rendering component\n\nThe component's name changed from BuilderComponent in Gen 1 to RenderContent in Gen 2.\n\nGen 1\n\nIn Gen 1, the import is:\n\nimport { BuilderComponent } from '@builder.io/react';\n\nNotice:\n\nthe component is BuilderComponent\nthe Gen 1 SDK is @builder.io/react\n\nGen 2\n\nIn Gen 2, the import changes to:\n\nimport { RenderContent } from '@builder.io/sdk-react';\n\nNotice:\n\nthe component is RenderContent\nthe Gen 2 SDK is @builder.io/sdk-react\nImporting helpers to configure the editor\n\nThe process of importing helpers to configure the editor has also changed between React Gen 1 and React Gen 2.\n\nGen 1\n\nIn Gen 1, import a Builder object and use the register() helper:\n\nimport { Builder } from '@builder.io/react';\n\n\nBuilder.register('insertMenu', {\n  name: 'Our components',\n  items: [\n    { name: 'Hero' },\n    { name: 'Double Columns' },\n    { name: 'Triple Columns' },\n    { name: 'Dynamic Columns' },\n  ],\n})\n\n\nGen 2\n\nIn Gen 2, the Builder import no longer exists. Instead, import register directly from the module:\n\nimport { register } from '@builder.io/sdk-react';\n\nregister('insertMenu', {\n  name: 'Our components',\n  items: [\n    { name: 'Hero' },\n    { name: 'Double Columns' }\n  ],\n})\n\nImporting helpers to register custom components\n\nThe process of importing the helper to register custom components has also changed between Gen 1 and Gen 2.\n\nGen 1\n\nIn Gen 1, import the Builder object and use the registerComponent() helper:\n\nimport { Builder } from '@builder.io/react';\nimport { MyHero } from './MyHero';\n\nBuilder.registerComponent(MyHero, {\n  name: 'Hero',\n  inputs: [\n   { name: 'title', type: 'string' },\n  ],\n});\n\n\n\nGen 2\n\nIn Gen 2, instead of using registerComponent, create a customComponents array containing all the custom components, and pass that as a prop to the RenderContent component:\n\nimport { RenderContent } from '@builder.io/sdk-react';\nimport { MyHero } from './MyHero';\n\nconst MY_HERO_CUSTOM_COMPONENT = {\n  component: MyHero,\n    name: 'Hero',\n    inputs: [\n      { name: 'title', type: 'string' },\n    ],\n}\n\n// this array can contain as many custom components as you want\nconst CUSTOM_COMPONENTS = [MY_HERO_CUSTOM_COMPONENT]\n\n// pass the array to RenderContent\n<RenderContent customComponents={CUSTOM_COMPONENTS} />\n\n\nImporting helpers to fetch data\n\nThe process of importing the helper to fetch data has also changed between Gen 1 and Gen 2.\n\nGen 1\n\nIn Gen 1, import a builder object and use the get() or getAll() helper:\n\nimport { builder } from '@builder.io/react';\n\nconst pages = await builder.getAll('page', {\n  fields: 'data.url,name',\n});\n\nconst page = await builder.get('page', {\n  fields: 'data.url, name',\n});\n\n\nCalls to fetch multiple entries from Builder no longer fetch or load references or Symbols by default. To fetch the references in these calls, be sure to manually pass in enrich: true when using getAll().\n\nimport { builder } from '@builder.io/react';\n\nconst pages = await builder.getAll('page', {\n  fields: 'data.url, name',\n  // to fetch references and Symbols\n  options: { enrich: true }\n});\n\n\nFor more detail, read Fetching reference and Symbols further in this document.\n\nGen 2\n\nIn Gen 2, the builder import is no longer used. Instead, import fetchOneEntry() and fetchEntries() — to fetch single and multiple entries respectively — directly from the package. Additionally, the apiKey is now a required field:\n\nimport { fetchOneEntry, fetchEntries } from '@builder.io/sdk-react';\n\nconst page = await fetchOneEntry({\n  model: 'page',\n  fields: 'data.url,name',\n  apiKey: 'YOUR_API_KEY',\n  options: { enrich: true }\n});\n\nconst pages = await fetchEntries({\n  model: 'page',\n  fields: 'data.url,name',\n  apiKey: 'YOUR_API_KEY',\n  options: { enrich: true }\n});\n\n\n\nCalls to fetch multiple entries from Builder no longer fetch or load references or Symbols by default. To fetch the references in these calls, be sure to manually pass in the options object with enrich: true when using fetchOneEntry() and fetchEntries().\n\nFor more detail, read the next section in this document, Fetching reference and Symbols.\n\nFetching references and Symbols\n\nUsing enrich: true with the options object is crucial in ensuring that references and Symbols are fetched, which provides a consistent experience between the Visual Editor and the live site.\n\nGen 1\n\nTo fetch references and Symbols in Gen 1 when using builder.getAll(), pass in the enrich: true option:\n\nimport { builder } from '@builder.io/react';\n\n// Fetch multiple entries with references and Symbols\nconst pages = await builder.getAll('page', {\n  fields: 'data.url, name',\n  options: { enrich: true } // Required\n});\n\n\nThe options object with enrich:true is not required for Gen 1 builder.get().\n\nGen 2\n\nTo fetch reference and Symbols in Gen 2 when using fetchOneEntry() orfetchEntries(), include the enrich: true option:\n\nimport { fetchOneEntry, fetchEntries } from '@builder.io/sdk-react';\n\n// Fetch a single entry with references and Symbols\nconst page = await fetchOneEntry({\n  model: 'page',\n  fields: 'data.url, name',\n  apiKey: 'YOUR_API_KEY',\n  // `enrich` recommended for fetchOneEntry()\n  options: { enrich: true } \n});\n\n// Fetch multiple entries with references and Symbols\nconst pages = await fetchEntries({\n  model: 'page',\n  fields: 'data.url, name',\n  apiKey: 'YOUR_API_KEY',\n  options: { enrich: true } // Fetch references\n});\n\n\nThough enrich: true isn't required to fetch references and Symbols when using fetchOneEntry(), it is a best practice always to use it, whether you're using fetchOneEntry() or fetchEntries().\n\nUsing enrich when rendering content\n\nGen 1\n\nIn Gen 1 of the Builder SDK, fetch references and Symbols when rendering components with BuilderComponent by specifying enrich to true:\n\nimport { BuilderComponent } from '@builder.io/react';\n\n<BuilderComponent\n  modelName=\"page\"\n  options={{ enrich: true }} // <-- HERE\n  ...\n/>\n\n\nUsing options={‌{ enrich: true }‌} with BuilderComponent makes sure that references and Symbols associated with the content are fetched during rendering, which provides a consistent experience with the live site where the content is published.\n\nGen 2\n\nIn Gen 2 of the Builder SDK, when rendering components using RenderContent, fetch references and Symbols by specifying enrich: true:\n\nimport { RenderContent } from '@builder.io/sdk-react';\n\n<RenderContent\n  customComponents={CUSTOM_COMPONENTS} \n  options={{ enrich: true }}  // <-- HERE\n  ...\n/>\n\n\nUsing options={‌{ enrich: true }‌} with RenderContent ensures that your custom components have access to the necessary content and provides a consistent experience with the live site where the content is published.\n\nWhat's next\n\nFor more detail on the Gen 2 (or Mitosis) SDKs, see the Builder GitHub repo."
  },
  {
    "title": "Scripting the Visual Editor - Builder.io",
    "url": "https://www.builder.io/c/docs/scripting-the-editor",
    "html": "Scripting the Visual Editor\n\nYou can leverage your browser's console with JavaScript to manipulate elements in a Builder content entry.\n\nOpen a Builder content entry in the Visual Editor.\nOpen your browser's JavaScript console.\nIn the console, use the global builder to interact with the elements in the current entry as in the following video example:\n\nThe example in the video above removes the top margin from the elements on the Page and is as follows:\n\nbuilder.allEditingElements.forEach(el => {\n  if (el.style.get('marginTop') === '20px') {\n    el.style.delete('marginTop')\n  }\n})\n\nWhat's next\n\nIf you'd prefer to use the UI, rather than the browser console, visit Intro to Plugins where you can find information on what plugins are and how to use them."
  },
  {
    "title": "Generating code from your Builder content entries - Builder.io",
    "url": "https://www.builder.io/c/docs/generate-code",
    "html": "Generating Code with Visual Copilot\n\nin beta\n\nWhen generating code with Builder, you can generate code for any content entry.\n\nPrerequisites\n\nBefore generating code in Builder, make sure:\n\nYou have a Builder Page or Section with content\nOverview\n\nWhen generating code, you specify your framework, styling, and select Fast or Quality for code output type.\n\nThe image below gives an overview of where to select the main settings. The rest of this document goes into the available options in detail.\n\nSupported frameworks include:\n\nReact\nReact Native\nQwik\nVue\nAngular\nHTML\nSolid.js\nSvelte\n\nFor CSS, you can choose:\n\nTailwind\nCSS\nEmotion (React)\nStyled Components (React)\nStyled JSX (React)\n\nBuilder-generated styles include clean, contextual class names, CSS variable names that align to your design system, and styled components with contextual names.\n\nCode quality\nThere are two types of generated code available, Fast code generation and Quality code generation.\nFast code generations\n\nFast code generations leverage Builder’s proprietary AI model and open-source compiler to nearly instantly turn any Figma design file into high-performing, responsive code for any framework.\n\nFree for all plans, Builder generates Fast code for the selected layers immediately, which is nearly instantly available. This code is best for rapid prototyping and working out quick concepts.\n\nQuality code generations\n\nQuality code generations further enhance fast code generations to support your framework and styling requirements by adding an additional AI model that has been fine-tuned to generate clean, semantic code just as developers would write themselves.\n\nQuality code generates at a more deliberate speed as AI considers the design as a whole and thoughtfully creates corresponding code.This bespoke option is more specific to your needs in that you can tell Builder's AI precisely what you want with custom instructions and prompts.\n\nFor more detail on using Quality code, read Prompting AI for customization.\n\nGenerating code for your Builder entry\n\nTo generate the code from your content entry:\n\nOpen the Page or Section in the Visual Editor.\nFor the whole content entry, make sure nothing's selected. For just a portion of the entry, select what you'd like code for.\nIn the Visual Editor, click on the Get code icon, < >, in the upper right.\nIn the code pane that opens, select your Framework and Styling.\n\nThe video below shows this process:\n\nAfter generating the code, you can do one of the following to get your code into your codebase:\n\nCopy the code by clicking on the copy icon and paste it manually into your project.\nSync the code automatically, which the next section covers.\nSyncing the code automatically with your codebase\n\nTo automatically sync the generated code with your local project, it helps to have Devtools installed and the dev server running.\n\nTo install Devtools and start the dev server, if needed:\n\nExpand the Sync code section on the right.\nClick the Sync to Your Codebase button.\nCopy the npm command and run it in the terminal at the root of your project.\nStart the dev server.\n\nIf Devtools is installed and the dev server is running:\n\nWhen the dev server is running and detected*, the Sync to Your Codebase button turns blue. Now, when you click it, you'll receive a prompt for the location where you'd like to sync your code.\nEnter the path and file name or accept the default suggestion.\nClick Sync.\n\n*Detecting the dev server should only take about 2 seconds at a maximum.\n\nThe following video shows the entire process:\n\nFor more information on Devtools, visit Using Builder Devtools for Automated Integration.\n\nSyncing the code from the command line\n\nAs an alternative to using Devtools, you can run the generated npx command at the command line; for example, npx builder.io add ####, where #### is a hash that identifies the generated code.\n\nThe next video shows running this command and opening the synced code.\n\nPrompting AI for customization\n\nTo further customize your generated code with AI:\n\nBe sure you've selected Quality for the type of code.\nAt the bottom of the screen, select a suggestion or type in your own request.\n\nAs an example, the following video shows this process to break the content into separate components by selecting the multiple components suggestion:\n\nThe following image and example code show how AI worked to break the code up into separate components in the previous video:\n\nExpand for example code excerpts:\n\nCustomizableHeroLayout()\n\nHeroSection()\n\nFeatureSection()\n\nSuggested prompts for code generation include the following list. By selecting any of them, Builder regenerates the code while incorporating these features:\n\nUse Next.js Image: adds Next.js Image to your code.\nMake interactive: adds interactivity such as code that supports click events.\nBreak into multiple components: refactors code into separate components.\nUse props: adds props, making your code easier to maintain and use.\nUse MUI: uses the Material UI design system.\n\nFor other features, type your request into the input and press Enter.\n\nAdding persistent custom instructions\n\nIn addition to using the default prompts, you can give Builder your own instructions so that any time you generate code Builder will create it to your specifications.\n\nSaved custom instructions persist through logging out and apply across your Organization and Space per user. That means that if you add custom instructions, they only apply to your account, whereas a teammate's custom instructions would only apply to their own account.\n\nTo add your own custom instructions:\n\nIn the Generated Code panel, click the Settings wheel on the bottom left, next to the input.\nList your instructions by typing them in. You may also click on the suggestions to add them.\nWhen you're done, click the Save button.\n\nThe next video shows adding custom instructions:\n\nEditing or removing custom instructions\n\nTo remove or edit your custom instructions:\n\nClick the Get Code icon to open the Generated Code panel.\nIn the Generated Code panel, click the Settings wheel on the bottom left, next to the input.\nEdit or remove your instructions.\nWhen you're done, click the Save button.\n\nThe next video shows editing custom instructions:\n\nWhat's next\n\nIn addition to the process outlined above, you can fully integrate Pages, Sections, and Data and take advantage of Builder's features. Visit Integrating Pages for more information."
  },
  {
    "title": "Custom Code in the Visual Editor - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/custom-code",
    "html": "Custom Code in the Visual Editor\n\nThe Builder Visual Editor helps you add event handlers, bind to state, and even add custom JavaScript that runs on your page.\n\nTip: To add custom HTML to your Page or Section, use the Custom Code Block rather than custom JavaScript.\n\nManaging state and actions\n\nIn Builder, you can bind state values to Builder blocks and implement custom actions when users interact with your content.\n\nFor detailed instructions on incorporating state bindings or action handlers, visit Building Interactivity Using State and Actions.\n\nWhen adding custom JavaScript code within a state binding or action handler, remember that you needn't use the return keyword to yield a value. Instead, choose from these four examples:\n\nData binding: one-line expressions\n\nFor straightforward, one-line expressions, you can write code directly in the code editor without the return statement:\n\nstate.showWelcomeMessage ? 'Say Hello' : 'Say Goodbye'\nData Binding: complex code blocks\n\nFor more intricate logic, export a default value:\n\nlet greeting;\nif (justLoggedIn) {\n  value = 'Welcome';\n} else {\n  value = 'hi';\n}\nexport default greeting;\nAccessing state\n\nYou can access Builder state in both state bindings and action handlers. While state bindings are typically closely bound to Builder, you can also modify the state value within the binding. For example:\n\n// use the plain value from state\nstate.someStringValue\n\n// uppercase the state value\nstate.someStringValue.toUpperCase()\n\n// return a different value depending on state property\nstate.someBooleanValue ? 'yes' : 'no\nAction handlers: using the Event object\n\nAction handlers introduce an additional object you can access: event.\n\nThis event object represents the HTML event triggered by the selected action. You can leverage event to access the event's target element or invoke methods such as preventDefault or stopPropagation:\n\n// access the value attribute (ie from an input)\n// and store it in builder state\nstate.someStateProp = event.currentTarget.value;\n\n// if you have a link with an href, you might want to stop\n// default browser navigation and handle this yourself\nevent.preventDefault();\nvar targetElementId = event.currentTarget.id;\nvar elementToScrollTo = document.getElementById(targetElementId);\nelementToScrollTo.scrollIntoView({ behavior: 'smooth' });\nEditing Custom JavaScript and CSS\n\nTo add custom styles or JavaScript to your content:\n\nIn the content entry, go to the Data tab.\nExpand the Code section.\nClick the Edit Custom JS + CSS button.\nIn the window that opens, you can put your CSS on the left and your JavaScript on the right.\nCustom CSS example\n\nThis example shows adding some custom CSS to a Page and then applying it to elements on the Page.\n\nThe CSS in below—which the video features–applies a margin and blue color to links (the a tag), and a yellow background color to any element with .my-class:\n\n/* Style all link elements */\na {\n     margin: 10px;\n     color: blue;\n}\n\n/* Style all elements with the class name \"my-class\" */\n.my-class {\n\tbackground-color: yellow;\n}\n\n\nTo use the CSS, add the code to the Custom Code editor and then apply the styles either by applying a class to an element or creating elements that would naturally inherit those styles.\n\nThe following video shows how to add custom CSS and apply it to elements. A written explanation follows the video.\n\nAny element that has the .my-class applied inherits the .my-class styles as soon as .my-class is applied to that element. In this example, when the Box is given the class .my-class, its background immediately turns yellow.\n\nAny elements that are styled directly in the CSS, such as links in this example, are styled automatically. This happens in the video as soon as the copy becomes a link.\n\nCustom Javascript example\n\nYou can run JS client side and/or server side using Builder.isBrowser and Builder.isServer. By default, any code not wrapped with Builder.isBrowser or Builder.isServer is run on Builder's servers.\n\nTo run code client-side, wrap it in if (Builder.isBrowser) {}.\n\nFor example, suppose you're rendering your Builder content lazily on the client and you want to support linking directly to certain sections of a page based on the ID attribute of the section. You could do this with some custom JavaScript:\n\nif (Builder.isBrowser) {\n    const el = location.hash &&\n      document.getElementById(location.hash.slice(1))\n\n    el.scrollIntoView({ behavior: 'smooth' });\n}\n\n\nYou also have access to fetch() on the client and server. For server side data, you can export a default promise that resolves with the necessary data before responding:\n\nasync function main() {\n  if (Builder.isServer) {\n    // Place any code here you want to only run on \n    // the server. Any  data fetched on the server \n    // will be available to re-hydrate on the client\n    // if added to the state object\n    await fetch(someUrl)\n      .then(res => res.json())\n      .then(data => {\n        // set the data on the state object so \n        // you can access it from your components\n        state.someData = data;\n     });\n  }\n  if (Builder.isBrowser) {\n    // Place code that you only want to run \n    // in the browser (client-side only) here\n    // For example, anything that uses \n    // document/window access or DOM manipulation\n  }\n}\n\nexport default main();\n\nIn the provided example, data fetched on the server is stored on the state object and can be accessed as data bindings in both the server and client UIs. For more details on fetching and using data, refer to Dynamic Preview URLs.\n\nRemember to exercise caution and consider the impact on performance and security when adding custom code to your site. For instance, when incorporating custom event listeners, ensure the use of passive events for proper handling.\n\nWhen adding your custom JavaScript code, the useful builder values include:\n\nBuilder.isServer: Use to determine if the code is running on the server-side (such as in a Node.js environment) or not. It returns true if the code is executing on the server, and false if it's running in a browser.\nBuilder.isBrowser: Use to check if the code is running in a browser environment. It returns true if the code is executing in a web browser, and false otherwise, including server-side.\nBuilder.isPreviewing: Use to check if the code is currently in preview mode within the Visual Editor. It returns true if the code is being previewed in the Visual Editor, and false if it's not in preview mode.\nBuilder.isEditing: Use to check if the code is currently being edited within the Builder.io editor. It returns true if the code is being edited, and false if it's not being edited.\n\nFor the source code, visit GitHub.\n\nTip: If your custom code isn't delivering expected results when working with page elements or third-party scripts, the event loop's asynchronous nature might be the reason. Consider using setTimeout() or conditional checks to time your code accurately and synchronize it with the page's rendering process.\n\nWhat's next\n\nFor more information on the global objects available, visit:\n\nBuilding Interactivity with Sate and Actions\nCustom Data and Context\nMDN's Fetch API documentation"
  },
  {
    "title": "Custom Data and Context - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-actions",
    "html": "Custom Data and Context\n\nCustom actions give you a powerful tool for creating dynamic and interactive experiences in Builder. You can add new functionality to your UI, reuse code across multiple components, and create a more engaging and user-friendly experience for your users.\n\nTip: The techniques covered in this document are for the Gen 1 React SDK. For detailed information on the Gen 2 SDKs, visit SDK Comparison.\n\nPassing data down with BuilderComponent\n\nTo pass data down, you can use the data prop in the BuilderComponent and assign it an object with key-value pairs. For example, you can pass a list of products and additional data, such as an isLoggedIn boolean:\n\n<BuilderComponent\n  model=\"page\"\n  data={{\n    products: productsList,\n    isLoggedIn: true,\n  }}\n  content={builderJson}\n/>\n\n\nThe data passed down is available in Builder actions and bindings using the prefix state.*. For example, state.products refers to the productsList passed down in the example above.\n\nYou can also pass down functions and complex data using the context prop. For example:\n\n<BuilderComponent\n  model=\"page\"\n  context={{\n    addToCart: () => myService.addToCart(currentProduct),\n    lodash: lodash,\n  }}\n  content={builderJson}\n/>\n\n\nHere, the context object is assigned two key-value pairs:\n\na function addToCart()\nthe library lodash\n\nThe context passed down is available in Builder using the prefix context.*. For example, context.lodash refers to the lodash library passed down in the example above.\n\nExample: setting up a custom action on a button\n\nYou can add an action to any element, though button actions are frequently customized, which this section covers.\n\nIn your code: passing down a function\n\nThe following example demonstrates a context object that defines a single function called myFunction(), which displays an alert with \"Hi!\" when called.\n\nexport default () => (\n  <BuilderComponent \n    name=\"page\" \n    context={{ \n      myFunction: () => alert('Hi!') \n    }} \n  />\n)\n\n\nBy passing down functions using the context prop, you can create flexible and dynamic UI components in the Builder Visual Editor that respond to user input and other events.\n\nIn Builder: adding an on click event\n\nTo assign the function to run on click of a button:\n\nSelect the button.\nGo to the Data tab.\nExpand the Element events section. For this example, leave the default of On to click.\nClick the + New Event button.\nClick Edit Action > + Action > Custom Code.\nAdd your custom Javascript. In this example, add context.myFunction().\n\nThe following video demonstrates this process:\n\nAfter you've set up a custom action on an element, such as a button, you can save the element as a Template or Symbol for reusability."
  },
  {
    "title": "Connecting your API data to builder - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/connecting-api-data",
    "html": "Connecting API Data\n\nBy connecting to your API data, you can bind a single element or iterate over your data in the Builder Visual Editor. This tutorial covers how to set up an element, connect your data, and bind singly or iterate through your data.\n\nTo follow the example, you can use your own JSON API endpoint, tweaking to your needs, or use the one from the tutorial:\n\nhttps://randomuser.me/api?results=10\nSetting up a repeatable element\n\nTo iterate over a list of entries in your data, first set up a repeatable element that can accommodate your data objects. If you already have a repeatable element, check your structure against these instructions or skip to the next section.\n\nCreate a Page if you don't have one already.\nWithin the Visual Editor drag and drop a Box block from the Insert tab into the content area.\nDrag and drop another Box block into the first Box. Now you have one Box nested within another Box.\nDrag and drop an Image block into the inner Box.\nSelect the Box that wraps the image, and give it a width of 200px.\nDrag and drop a text box below the Image, within the same Box as the Image.\n\nThe following video demonstrates this process:\n\nConnecting to your data source\n\nTo add your JSON API endpoint:\n\nGo to the Data tab.\nIn the API Data section, click the + API Data Source button.\nName the Data Source according to your use case. This example uses users.\nPaste your JSON API endpoint URL into the input field. The format of this URL depends on your API. If you'd like to use the example endpoint, paste in https://randomuser.me/api?results=10.\nClick the Done button.\n\nThe following video demonstrates providing your endpoint URL:\n\nBinding your data\n\nAfter you've connected your data by specifying your JSON API endpoint, you can bind a single piece of data, multiple items, or iterate through your data.\n\nIterating through your data\n\nTip: Iterating, or repeating, the element for every item in your data is optional. If you'd prefer only to bind one item, skip to the next section.\n\nTo cause the smaller box, the one that contains the image, to repeat for every item coming in from an API, do the following:\n\nSelect the inner Box that contains the Image and Text blocks.\nStill in the Data tab, expand the Element data bindings section.\nFor Repeat for each, click the down arrow and select what you'd like to list. This example uses Results. This provides one item per result in the array.\nSelect an Image block.\nIn the Element data bindings section, click the + New Binding button.\nFor the Get dropdown, select Image.\nFor the From dropdown menu, select the large picture option, Results Item - Picture - Large.\nSelect a Text block.\nIn the Element data bindings section, click the + New Binding button.\nFor the Get dropdown, select Text.\nFor the From dropdown menu, select the large picture option, Results Item - Name - First.\n\nThe following video demonstrates iterating through 10 users from the example endpoint:\n\nBinding data to a specific value on a single element\n\nIterating over your data is optional. You could instead bind to a single element, rather than iterate over all data from the endpoint. For example, to bind to the value for the first name for the first item in the array:\n\nSelect an unbound Text box.\nIn the Data tab, after having provided your JSON API endpoint, expand the section Element Data Bindings.\nFor Get, choose Text.\nFor From, select or enter in the code editor state.users.results[0].name.first\nUsing the React SDK with SSR on cloud hosting services\n\nIf you're using Builder's SDKs and data binding on a provider with edge workers, such as Cloudflare, Netlify, or Vercel, you might encounter a situation where certain dependencies are automatically removed in their ISR (Incremental Static Regeneration) functions.\n\nTwo indicators can help identify this issue:\n\nHydration errors—where the SSR and the client side version are different—because the data binding did not execute on the server side.\nMissing data that populates on the client side; that is, the data binding is not executing on the server side.\n\nThis can lead to a failure with the function safeDynamicRequire. In such cases, consider applying the following workaround.\n\nIn the pages/_document.jsx file or any server-only execution location, add the following code:\n\nimport ivm from 'isolated-vm'\nimport { Builder } from '@builder.io/react'\n\nconst isolate = new ivm.Isolate({ memoryLimit: 128 });\nconst context = isolate.createContextSync();\nBuilder.setServerContext(context);\n\n\nIf there's no _document.tsx file in the project, you can add the code anywhere but wrap it with this condition:\n\nif (Builder.isServer) {\n  // Add the provided code here\n}\n\n\nThis workaround should prove helpful when using Builder's React SDK on the server side with Vercel or similar platforms where automatic dependency removal might cause issues.\n\nStyling your iterated data\n\nAfter your data is displaying, you can style your content however you like. As an example, this video shows changing the layout to a grid pattern by selecting the outermost Box, setting the Inner Layout to Grid, and applying a margin."
  },
  {
    "title": "Using the Builder API Key - Builder.io",
    "url": "https://www.builder.io/c/docs/using-your-api-key",
    "html": "Using Builder API Keys\n\nAn API key is an alphanumeric string that you can use to connect your code base with Builder. Use the Builder Public API Key to integrate with Builder.\n\nAn example of a Builder API Key is bb209db71e62412dbe0114bdae18fd15.\n\nPrerequisites\n\nTo get the most our of this document, you should have the following:\n\nA Builder account\nAn app in your framework of choice\n\nTip: The Builder Public API Key is public, meaning that you don't have to keep it private. Because of this, there are no inherent security risks in it being publicly viewable, for example, on GitHub.\n\nFinding your Public API Key\n\nYou can find and copy your Public API Key with the following steps:\n\nWithin your Builder Space, press Cmd/Ctrl + k to open the Command Palette.\nStart to type the letters API into the search field to filter results.\nClick your API key to copy to your clipboard.\n\nAlternatively, you can also find your Public API Key in Account Settings for the Space:\n\nWithin your Builder Space, go to the Account Settings section.\nClick the copy icon to the right of the Public API Key field.\n\nThe video below shows both ways to find the Public API Key.\n\nUsing your Public API Key in your framework\n\nMost JavaScript apps use builder.init() to pass in the Public API Key. Replace YOUR_API_KEY with the Public API Key you copied from Account Settings.\n\n// Replace with your Public API Key\nbuilder.init('YOUR_API_KEY')\n\nThe following example shows what an actual Public API Key looks like when passed into builder.init().\n\n// an example of an actual API key passed into init()\nbuilder.init('bb209fb71eh2412dbe0114bdae18fd15')\nUsing your Public API Key in Angular\n\nIn Angular, pass your API Key into BuilderModule.forRoot(), by replacing YOUR_API_KEY with the Public API Key you copied in Account Settings. Place the forRoot() method in the @NgModule() imports array.\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    BuilderModule.forRoot(YOUR_API_KEY), // <-- Paste your API Key here.\n    ...\n  ],\n  ...\n})\nexport class AppModule {}\n\nWhen you replace the YOUR_API_KEY placeholder, it looks similar to the following example.\n\nManaging Private Keys\n\nUse Private Keys when you want to create a server-side only key for writing to your Builder account or to pull content that you want to keep private.\n\nTo view or use Private API Keys, you must have Admin or Developer permissions.\n\nTip: Keep your Private API Key secret. It allows anyone to have write access to your content in Builder. Only use it in API calls from your server, not calls from public client applications.\n\nRemember to ensure your Private API Keys are kept out of any version control system that you may be using.\n\nManaging an Organization's Private Key\n\nWith Organization Admin permissions, you can view, copy, or revoke the single, default Organization Private API Key. If you revoke the key, the dialogue gives you the option to create another key.\n\nTo manage the Private Key for your Organization:\n\nGo to the Organization Account Settings.\nTo the right of Private Keys, click the Edit button.\n\nFor more information on Admin permissions at the Organization level, see Managing Your Organization.\n\nManaging multiple Private API Keys in a Space\n\nIf you need to manage or create multiple Private API Keys, go to the Space Account Settings, rather than the Organization settings.\n\nTo manage the Private Key for your Organization:\n\nGo to the Organization Settings.\nTo the right of Private Keys, click the Edit button.\nCreate or revoke as many keys as you need.\n\nTo use Private Keys in a Space, make sure the Public readable toggle in the model is turned off. Then use the Content API to request private content using a Private API Key.\n\nFor more information, see Creating a Private Page.\n\nWhat's next\n\nWith your API Key in place, you can integrate powerful Builder features. To get started, check out the following tutorials:\n\nIntegrating Pages: set up your app so teammates can build Pages on their own.\nIntegrating Sections: integrate Section building for reusable content\nIntegrating CMS Data: create structured reusable data across your site\nIntegrating Symbols: elegantly reuse data across your app\nIntegrating Custom Components: use your custom components in Builder's drag-and-drop UI"
  },
  {
    "title": "How Builder Works: A Technical Overview - Builder.io",
    "url": "https://www.builder.io/c/docs/how-builder-works-technical",
    "html": "How Builder Works: A Technical Overview\n\nBuilder is a Visual Headless CMS. You determine which parts of your app that non-developers can create and manage. Builder passes data to your site or app using various SDKs and APIs.\n\nThe images below show how you:\n\nAdd a little code to your app\nUse Builder to add drag-and-drop\nClick the Publish button to make your content live\n\nBuilder doesn't host your site for you, but gives you the tools to dynamically load content created in Builder into your code. You have complete control as to what you want to be Builder-editable and where.\n\nYou control the structure of your site with models. You can customize where content of each model loads, how it is targeted and filtered, and where and how it is rendered.\n\nTo get up and running with an integrated app, see the Developer Quickstart.\n\nComparing to a traditional headless CMS\n\nIn many ways, Builder works the same as any headless CMS, and Builder's CMS data models work identically.\n\nLike a typical headless CMS, you create entries with structured custom fields or targeting. You can then query these fields with our content API and display the content you want, where you want.\n\nIn many cases with Builder, the main difference is instead of hard coding a page layout, you have a Builder renderer component render the content dynamically, optionally using components from your codebase.\n\nOptionally, you can also restrict Builder editing to only these components—with or without allowing custom styling—using components-only mode and/or roles and permissions.\n\nThe next image shows how integrating your app can remove hard-coded content best maintained by other roles on your team, such as marketers, and copywriters.\n\nIn addition to visual editing, Builder also adds additional features that are less common in traditional headless CMSes, such as content targeting and analytics.\n\nStructured CMS data has its purposes, and while it often isn't the best for things like pages and layouts, it can be great for a number of other use cases that structured data can be more ideal than pure visual editing.\n\nHow the data is structured\n\nUnder the hood, Builder is a headless CMS like any other. You can create documents with structured data fields and consume these via our SDKs and APIs and render the data as you choose.\n\nOn top of this, Builder adds even more power by letting you register components that can render dynamically, saving you from having to write all of this logic manually. Instead, you can pass the data to a render Builder provides, such as in the following snippet:\n\nFor pages and sections, Builder automatically populates a field called blocks that is a list of components to render and their options, as in the following snippet:"
  },
  {
    "title": "Integrating Symbols - Builder.io",
    "url": "https://www.builder.io/c/docs/integrate-symbols",
    "html": "Integrating Symbols\n\nSymbols are a type of section model you can integrate for editing on your site or app. They help you elegantly reuse content across many Builder Pages and Sections. For more information, see Intro to Symbols.\n\nPrerequisites\n\nTo follow along with this tutorial, you should have the following:\n\na Builder account\nan app in the framework of your choice with the appropriate Builder SDK installed\na Symbol model that you've already created\nyou should have already integrated Page building or Section building\n\nTip: If you need to create an app, follow the steps for your framework in the Create an app section of Integrating Page Building.\n\nAdd symbol editing to your app\n\nTo get started, create a special page on your site specifically for symbol editing. This is what the Builder preview opens when you create and edit symbols. It's important this be on a URL directly on your site, so all previewing and editing are accurate.\n\nIn this example, this page is named /edit-symbol.\n\nNext\nGatsby\nNuxt\nRemix\nHydrogen\nSvelte\nAngular\nREST API\n\nCreate a page with the following contents. Make sure to replace YOUR_API_KEY with your account's Public API Key:\n\n// pages/edit-symbol.jsx\n\nimport { BuilderComponent, builder } from '@builder.io/react';\n\n// Replace with your Public API Key.\nbuilder.init(YOUR_API_KEY);\n\nexport default function Page() {\n  return <BuilderComponent model=\"symbol\" />\n}\n\n\nBuilderComponent allows the drag and drop editor to work in the specified region of your site.\n\nNote that if you have registered custom components, you must import them on this page so that they are available in the Visual Editor.\n\nUpdate your symbol preview URL\n\nGo to Models and choose the Symbol model.\n\nTip: If you don't have Symbol here, make sure that you've met the prerequisite of having created a Symbol. For step-by-step instructions, see How to Make a Symbol.\n\nEnter your site domain at this new /edit-symbol path you just created, for example https://my-site.com/edit-symbol.\n\nYou can use localhost when testing locally, then change to a hosted URL like your QA or production URL once your code updates have been deployed.\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples."
  },
  {
    "title": "Integrating Structured Data - Builder.io",
    "url": "https://www.builder.io/c/docs/integrate-cms-data",
    "html": "Integrating Structured Data\n\nYou can use Builder CMS Data to create structured reusable data across your site. You can manage the data schema, add, and remove fields within the UI and teammates can create and remove data items in auto-generated structured forms.\n\nExamples include:\n\nHeader navigation links\nProduct Details\nBlog authors\nStructured rich content such as user profiles\n\nThis tutorial shows you how to add editable navigation links to your site header.\n\nPrerequisites\n\nTo follow along with this tutorial, you should have the following:\n\na Builder account\nan app in the framework of your choice with the appropriate SDK installed\n\nTip: If you need to create an app, follow the steps for your framework in the Create an app section of Integrating Builder Pages.\n\nAdd header navigation link data to your app\nNext\nApp Router\nQwik\nReact\nRemix\nHydrogen\nGatsby\nVue\nNuxt\nSvelte\nAngular\nREST API\n\nCreate a page with the following contents, replacing YOUR_API_KEY with your account's Public API Key:\n\nimport { useEffect, useState } from \"react\";\nimport { builder } from \"@builder.io/react\";\n\n// Put your API key here\nbuilder.init(YOUR_API_KEY);\n\nexport default function App() {\n  const [links, setLinks] = useState([]);\n\n  // Get the CMS data from Builder\n  useEffect(() => {\n    async function fetchContent() {\n      const links = await builder.getAll(\"nav-links\", {\n        // You can use options for queries, sorting, and targeting here\n        // https://github.com/BuilderIO/builder/blob/main/packages/core/docs/interfaces/GetContentOptions.md\n      });\n      setLinks(links);\n    }\n    fetchContent();\n  }, []);\n\n  return (\n    <>\n      <header>\n        <nav>\n          {links.map((link, index) => (\n            <a key={index} href={link.data.url}>\n              {link.data.label}\n            </a>\n          ))}\n        </nav>\n      </header>\n      {/* Put the rest of your page here */}\n      {/* <RestOfYourPage /> */}\n    </>\n  );\n}\n\nCreating a Data model\n\nIn the Builder UI, create a Data model so you can create navigation links.\n\nIn the Models section of Builder, Click +Create Model.\nSelect Data.\nEnter Nav link as the name for your new Data model.\nClick +New Field.\nName the first field label and give it a type of Text.\nRepeat steps 3 and 4 to make a second label named Url with type url.\nClick Save.\nCreating Nav link content entries\n\nUse the new Data model to create Nav Link content entries.\n\nGo to the Content section of Builder.\nClick +New.\nSelect Nav Link.\nGive it a label, url, and name.\nClick Publish.\n\nTo make more links so that you can iterate through the links in your nav list, click the three dots and select Duplicate. Repeat steps 2-4 for each link you create.\n\nThe video below shows how to make three Nav Link entries.\n\nGo back to your website and refresh the page to see your nav links. After your links are rendering, try adding new content entries in Builder. For each new entry, the new link populates the nav.\n\nWhat's next\n\nFor more information on how to work with Models in Builder, refer to Understanding Content Models.\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples."
  },
  {
    "title": "Integrating Pages - Builder.io",
    "url": "https://www.builder.io/c/docs/integrating-builder-pages",
    "html": "Integrating Pages\n\nAs a developer, you can integrate Builder into your codebase and give other team members, such as content editors, marketers, and designers, the ability to build and manage pages without ever having to ping you.\n\nTip: This guide is detailed. If you'd prefer a more succinct guide to integrating, visit Developer Quickstart, which is a cheatsheet version of this document.\n\nCreate an app if you don't have one\n\nWe highly recommend that you integrate Builder into an existing app; however, if you need to create an app, follow the steps for your framework in this section.\n\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nReact offers a number of ways to create an app with various frameworks.\n\nAt the command line, change directory with the cd command where my-app is the name of your app:\n\ncd my-app\n\nTip: On Windows, be sure to use quoting when you install dependencies that use the @ operator; for example, npm install \"@builder.io/react\".\n\nAdd Builder as a dependency\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nAt the command line, use npm to install the Builder SDK:\n\nnpm install @builder.io/react\n\nStart the development server:\n\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\nnpm run dev\nAdd a Builder component to your app\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nPaste the following code into your JavaScript.\n\nA later section in this tutorial guides you through getting your Public API Key from the Account section of Builder. When you have your Public API Key be sure to add it to the builder.init() method in this code snippet. The API Key is required for connecting your app to Builder.\n\n\nimport { useEffect, useState } from \"react\";\nimport { BuilderComponent, builder, useIsPreviewing } from \"@builder.io/react\";\n\n// Put your API key here\nbuilder.init(YOUR_API_KEY);\n\n// set whether you're using the Visual Editor,\n// whether there are changes,\n// and render the content if found\nexport default function CatchAllRoute() {\n  const isPreviewingInBuilder = useIsPreviewing();\n  const [notFound, setNotFound] = useState(false);\n  const [content, setContent] = useState(null);\n\n  // get the page content from Builder\n   useEffect(() => {\n    async function fetchContent() {\n      const content = await builder\n        .get(\"page\", {\n          url: window.location.pathname\n        })\n        .promise();\n\n      setContent(content);\n      setNotFound(!content);\n\n      // if the page title is found, \n      // set the document title\n      if (content?.data.title) {\n       document.title = content.data.title\n      }\n    }\n    fetchContent();\n  }, [window.location.pathname]);\n  \n  // If no page is found, return \n  // a 404 page from your code.\n  // The following hypothetical \n  // <FourOhFour> is placeholder.\n  if (notFound && !isPreviewingInBuilder) {\n    return <FourOhFour/>\n  }\n\n  // return the page when found\n  return (\n    <>\n      {/* Render the Builder page */}\n      <BuilderComponent model=\"page\" content={content} />\n    </>\n  );\n}\n\nUsing your app with Builder\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\nUsing your app with Builder\n\nBuilder adds the ability for your team members–even those who don't code–to create and iterate on ideas with a drag-and-drop interface.\n\nHead over to Builder.io to sign up for an account if you don't already have one. Come back when you're logged in.\n\nThis next video covers the steps in this section of the tutorial all in one place to give you an idea of how it all works and the end result. This example uses Next.js but all frameworks use the same process:\n\nGetting your API Key\n\nTo connect your Builder.io space to your application, add the Public API key to your code.\n\nFind your Public API Key within Builder.io in one of two ways:\n\nPress Cmd/Ctrl+k in Builder to bring up the command palette and search for API Key. Clicking the Public API Key copies it to your clipboard.\nGo to Account Settings and copy your Public API Key.\n\nFor more detail about the Public API Key, see Using Builder API Keys.\n\nPaste the Public API Key into your app by replacing the YOUR_API_KEY placeholder in your code. This location varies depending on your framework and is covered in the earlier sections of this tutorial.\n\nThe following video shows copying the Public API Key and pasting it into a Next.js app.\n\nSetting the model preview URL\n\nTo enable Builder to open your site in the Visual Editor, provide a URL that Builder can open which has the Builder rendering component in it.\n\nGo to Models and choose the Page model.\nSet the Preview URL to http://localhost:<your-port>, where <your-port> is the port your app is using. Be sure to include the http://.\nClick Save.\n\nThe following video shows these steps:\n\nCreating a Builder Page\n\nCreate a Builder Page to use with your integrated app.\n\nGo to Content.\nClick the +New button near the top right of the screen.\nCreate a new page in Builder and name it Test Page. Notice that Builder automatically generates the path as /test-page.\nWhen you are prompted to choose a starting template, choose Blank. The editor for your new page loads automatically.\nIn your new page, drag in a Text block.\nClick Edit and add something like, \"I did it!!\".\nClick the Publish button in the upper right of the browser.\n\nThe next video shows creating a page in a Builder-integrated app and dragging in a text block:\n\nTip: After you deploy your updates, be sure to update this to a public URL, such as your live site or your staging site; for example, https://your-site.com, so anyone on your team can connect to your site for visual editing.\n\nDepending on the framework, the path and port can vary. Check your framework according to the below:\n\nFramework\tlocalhost URL\n\nAngular\n\n\t\n\nhttp://localhost:4200\n\n\n\n\nGatsby\n\n\t\n\nhttp://localhost:3000\n\n\n\n\nQwik\n\n\t\n\nhttp://localhost:5173\n\n\n\n\nRemix\n\n\t\n\nhttp://localhost:3000\n\nGo to http://localhost:<your-port>/test-page and check out your work. Well done!\n\nIf you're getting a 404 but aren't sure why, check these things:\n\nMake sure you've published your page in Builder by clicking the Publish button on the upper right corner.\nCheck the URL. If you name the page test2 for example, Builder adds a hyphen, so that the URL segment is test-2.\nMake sure that you've set the preview URL on the Page Model.\nBuilder Pages best practice\n\nWe recommend that you place your Builder pages between your header and footer. A common use case is developers keeping headers and footers in their codebase while integrating page building. In this way, non-developer team members can iterate on pages, without having to rely on developers.\n\nTo use Builder pages between your header and footer, follow the guidance below for your framework:\n\nNext\nQwik\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nImport your header and footer along with the other JavaScript imports at the top of your page component; for example, page.js.\n\nAdd the header and footer components before and after BuilderComponent.\n\n+ import MyHeader from '../components/my-header'\n+ import MyFooter from '../components/my-footer'\n\n export default function Page({ page }) {\n   ...\n   return (\n     <>\n       <Head>\n         <title>{page?.data.title}</title>\n       </Head>\n\n+      <MyHeader />\n       <BuilderComponent model=\"page\" content={page} />\n+      <MyFooter />\n     </>\n   );\n }\n\n\n\nFor a community example with Builder and Next.js that includes ISR capabilities and SEO optimizations, see Kenzitron's Builder.IO & NextJs starter with ISR & SEO optimization on GitHub.\n\nThis guide demonstrated integrating page building into an app. For more demo apps in many frameworks, see Builder's GitHub repository for complete examples.\n\nWhat's next\nNext\nQwik\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nWith your app and Builder working together, the next step is the fun part–add some pages in Builder and drag in some elements. Play with styles and explore the UI.\n\nUse your custom components in Builder\n\nTo use your own components in the Visual Editor, including replacing built-in blocks, see Integrating Custom Components.\n\nStart using custom components\n\nDeploy your updated app to a preview environment\n\nGive others a way to try the Visual Editor integrated with your site.\n\nDeploy to a preview env"
  },
  {
    "title": "Integrating Sections - Builder.io",
    "url": "https://www.builder.io/c/docs/integrate-section-building",
    "html": "Integrating Sections\n\nYou can use Builder Sections to create reusable content across multiple pages. You can manage the code within your codebase, and teammates in the UI can iterate in the Visual Editor.\n\nExamples include:\n\nBlog Article\nHero Section\nAnnouncement Bar\nProduct Editorial\nHomepage\n\nThis tutorial shows you how to create and add an announcement bar section to a page.\n\nFor more conceptual information Section Models, refer to the Section Models documentation.\n\nPrerequisites\n\nTo follow along with this tutorial, you should have the following:\n\na Builder account\nan app in the framework of your choice with the appropriate Builder SDK installed\n\nTip: If you need to create an app, follow the steps for your framework in the Create an app section of Integrating Page Building.\n\nAdd an announcement bar section to your app\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nShopify\nREST API\n\nCreate a page with the following contents. Make sure to replace YOUR_API_KEY with your Public API Key:\n\nimport { useEffect, useState } from \"react\";\nimport { BuilderComponent, builder } from \"@builder.io/react\";\n\n// Replace with your Public API Key.\nbuilder.init(YOUR_API_KEY);\n\nexport default function Page() {\n  const [announcement, setAnnouncement] = useState(null);\n\n  useEffect(() => {\n    builder\n      .get(\"announcement-bar\", {\n        userAttributes: {\n          // To allow targeting different announcements at different pages (URLs)\n          urlPath: window.location.pathname,\n        },\n      })\n      .toPromise()\n      .then((announcementBar) => setAnnouncement(announcementBar));\n  }, []);\n\n  return (\n    <>\n      {/* Put your header here. */}\n      <YourHeader />\n      {announcement && (\n        <BuilderComponent model=\"announcement-bar\" content={announcement} />\n      )}\n      {/* Put the rest of your page here. */}\n      <TheRestOfYourPage />\n    </>\n  );\n}\n\n\n\nSections are typically targeted using some information about the user's state.\n\nFor instance, you can display an announcement bar when the user visits particular URLs. With custom targeting attributes, you can even display content based on complex conditions, such as when a user adds a particular item to their cart.\n\nAside from targeting, you can also query sections by custom fields.\n\nconst urlPath = '/' + (params?.page?.join('/') || '');\n\nconst announce = await builder\n    .get('announcement-bar', { userAttributes: { urlPath } })\n    .toPromise();\n\n\nThe announcement bar section in the example above is targeted with the current URL using the urlPath targeting attribute. When Builder finds an announcement bar with a matching URL, it responds with that announcement bar's content.\n\nThe snippet below demonstrates how the page and the page's announcement bar are rendered.\n\nreturn (\n  <>\n    <!-- Put your header here -->\n    <YourHeader />\n    <BuilderComponent model=\"announcement-bar\" content={announce} />\n    <!-- The rest of your page -->\n    <TheRestOfYourPage />`\n  </>\n);\n\n\nBuilderComponent receives the content for the announcement bar through the content prop and renders it next to your page's content.\n\nYou can also render a Builder-managed page next to your announcement bar or any other section by placing multiple BuilderComponent instances next to each other.\n\nCheck out How to Create a Page for a step-by-step tutorial on how to create a page in Builder and Integrating Pages on how to render your page content within your template.\n\nCreating a Section model\n\nCreate a Section model so you can make an announcement bar content entry.\n\nGo to Models.\nClick +Create Model.\nSelect Section.\nEnter Announcement bar as the name for your new Section model.\nClick Create.\nFor all frameworks except Swift: change the Preview URL on the Model Options page to the URL of the page that you added code to display your section. This example uses /announcements, but yours might be different.\n\nThe video below demonstrates this process:\n\nDepending on the framework, the path and port can vary. Localhost does not apply to Swift.\n\nCheck your framework according to the below:\n\nFramework\tlocalhost URL\n\nAngular\n\n\t\n\nhttp://localhost:4200\n\n\n\n\nGatsby\n\n\t\n\nhttp://localhost:3000\n\n\n\n\nQwik\n\n\t\n\nhttp://localhost:5174\n\n\n\n\nRemix\n\n\t\n\nhttp://localhost:3000\n\nWhen you create or edit an announcement bar section, the Visual Editor displays your content embedded within your Preview URL page, providing visual context and importing styles from your site. It's a live view of your section, as it will look on one of your pages when you publish.\n\nTip: Published sections typically appear across multiple pages with different URLs depending on how they're targeted. When previewing in the editor, however, they only appear within the Preview URL's page. For more information, refer to Editing and Previewing Your Site.\n\nFor more information what Section Models are and how to use them, refer to the Section Models documentation.\n\nCreating an announcement bar content entry\n\nNow that your Section model is set up, you can create an announcement bar content entry to add an announcement bar to your site.\n\nGo to Content.\nClick the + New button and select Announcement bar.\nBuild and style your announcement bar.\nName the content entry.\nClick Publish.\n\nThe video below demonstrates this process:\n\nTargeting by URL path\n\nTo make your announcement bar display based on targeting, in the section content entry; for example, in the announcement bar:\n\nClick on the Targeting icon.\nFor Where, select URL path.\nAdd the URL path you'd like to target.\nClick the Publish button.\n\nThe video below shows this process in an integrated Remix app where the targeted URL path is /builder so that the announcement bar doesn't show up on any other URLs. This process is the same, regardless of the framework you use. The URL path you target, however, might differ.\n\nTip: If you're using Gatsby, you may need to restart your app to render the announcement bar.\n\nWhat's next\nNext\nQwik\nReact\nRemix\nHydrogen\nVue\nSvelte\nAngular\nREST API\n\nWith your app and Builder working together, the next step is the fun part–add some more Sections in Builder and drag in some elements. Play with styles and explore the UI.\n\nUse your custom components in Builder\n\nTo use your own components in the Visual Editor, including replacing built-in blocks, see Integrating Custom Components.\n\nStart using custom components\n\nDeploy your updated app to a preview environment\n\nGive others a way to try the Visual Editor integrated with your site.\n\nDeploy to a preview env\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples."
  },
  {
    "title": "Developer Quickstart - Builder.io",
    "url": "https://www.builder.io/c/docs/quickstart",
    "html": "Developer Quickstart\n\nThis Quickstart shows how to integrate page building with Builder.io in a brief format. We recommend this as the best way to get started with the Builder platform.\n\nTip: This Quickstart moves at a fast pace to get you up and going as quickly as possible, so it assumes development proficiency and workflow familiarity. For more detailed, step-by-step instructions, see Integrating Pages.\n\nPrerequisites\n\nTo get the most out of this guide, you should have:\n\nA working app in the framework of your choice. Create an app if you don't already have one.\nA basic understanding of development including the command line, npm, and code for your framework.\nA Builder Space.\nStep 1: Add Builder as a dependency\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nAt the command line, use npm to install the Builder SDK:\n\nnpm install @builder.io/react\n\nStart the development server:\n\nnpm start\n\nTip: On Windows, be sure to use quoting when you install dependencies that use the @ operator; for example, npm install \"@builder.io/react\".\n\nStep 2: Add a Builder component to your app\nNext\nApp Router\nQwik\nSwift\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nPaste the following code into your JavaScript, making sure to replace YOUR_API_KEY with your Public API Key, which you can find in the Account section of Builder or by pressing Cmd/Ctrl+k and filtering for \"API\".\n\n\nimport { useEffect, useState } from \"react\";\nimport { BuilderComponent, builder, useIsPreviewing } from \"@builder.io/react\";\n\n// Put your API key here\nbuilder.init(YOUR_API_KEY);\n\n// set whether you're using the Visual Editor,\n// whether there are changes,\n// and render the content if found\nexport default function CatchAllRoute() {\n  const isPreviewingInBuilder = useIsPreviewing();\n  const [notFound, setNotFound] = useState(false);\n  const [content, setContent] = useState(null);\n\n  // get the page content from Builder\n   useEffect(() => {\n    async function fetchContent() {\n      const content = await builder\n        .get(\"page\", {\n          url: window.location.pathname\n        })\n        .promise();\n\n      setContent(content);\n      setNotFound(!content);\n\n      // if the page title is found, \n      // set the document title\n      if (content?.data.title) {\n       document.title = content.data.title\n      }\n    }\n    fetchContent();\n  }, [window.location.pathname]);\n  \n  // If no page is found, return \n  // a 404 page from your code.\n  // The following hypothetical \n  // <FourOhFour> is placeholder.\n  if (notFound && !isPreviewingInBuilder) {\n    return <FourOhFour/>\n  }\n\n  // return the page when found\n  return (\n    <>\n      {/* Render the Builder page */}\n      <BuilderComponent model=\"page\" content={content} />\n    </>\n  );\n}\n\nUsing your app in Builder's Visual Editor\nGo to the Models section in Builder and choose your Page model.\nSet the Preview URL to http://localhost:YOUR_PORT where YOUR_PORT is the port number for your app. Be sure to include the http://.\nClick Save.\nIn the Content section of Builder, create a new blank Page and name it something like Test Page.\nAdd some minimal content, such as a Text block with some copy such as \"I did it!\".\nClick the Publish button.\nGo to http://localhost:3000/test-page, where test-page is the name you gave your page, and check out your work. Well done!\n\nThe next video shows this process, including getting your API Key as described in the last section:\n\nIf you're getting a 404 but aren't sure why, check these things:\n\nMake sure you've published your page in Builder by clicking the Publish button on the upper right corner.\nCheck the URL. If you name the page test2 for example, Builder adds a hyphen, so that the URL segment is test-2.\n\nFor a community example with Builder and Next.js that includes ISR capabilities and SEO optimizations, see Kenzitron's Builder.IO & NextJs starter with ISR & SEO optimization on GitHub.\n\nWhat's next\n\nWith your app and Builder working together, the next step is the fun part–add some pages in Builder and drag in some elements. Play with styles and explore the UI.\n\nUse your custom components in Builder\n\nTo use your own components in the Visual Editor, including replacing built-in blocks, see Integrating Custom Components.\n\nStart using custom components\n\nDeploy your updated app to a preview environment\n\nGive others a way to try the Visual Editor integrated with your site.\n\nDeploy to a preview env\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples."
  },
  {
    "title": "Using Builder Devtools for Automated Integration - Builder.io",
    "url": "https://www.builder.io/c/docs/devtools",
    "html": "Using Builder Devtools for Automated Integration\n\nin beta\n\nYou can skip manual integration and let Builder's Devtools handle the details for you.\n\nBuilder Devtools automatically handles integration with Builder's Visual Headless CMS and provides an intuitive UI for registering components and managing content.\n\nCurrently, Builder Devtools supports integration with Next.js, and Qwik.\n\nNeed another framework? While we add more frameworks, refer to the Developer Quickstart to integrate with other frameworks.\n\nPrerequisites\n\nMake sure you have Node.js and npm (Node Package Manager) installed on your system.\n\nCreate an app if you don't already have one\n\nGenerate an app and cd into the new app's directory by running the following command at the command line, where my-next-app or my-qwik-app is the name you give your app:\n\nNext\nQwik\nnpx create-next-app my-next-app\ncd my-next-app\nInstall Builder Devtools\n\nThis command automatically sets up the integration with Builder, connects to your Builder account, and adds your API key.\n\nIn the root of your project, run the following command to install Builder Devtools:\n\nnpm init builder.io@latest\n\nWhen prompted, respond Yes to integrating with Builder.io:\n\nStart the development server\n\nAfter installing Builder Devtools, start your development server:\n\nnpm run dev\nAccess the Builder Devtools UI\n\nWith the development server running, access the Builder Devtools UI:\n\nOpen your web browser and navigate to your project's local development URL—usually http://localhost:3000/ for Next.js or http://localhost:5173/ for Qwik.\nClick the Let's get started button.\nChoose a Space to authorize for integration and click Authorize.\nClick the Go to your app button.\nOn the bottom right, click on the Builder logo to get to your components, settings, and adding a Builder Page.\n\nTip: If you're using Windows, you might need to restart your dev server.\n\nThe video below shows authorizing and connecting to a Builder Space.\n\nRegister components\n\nThe Devtools drawer displays all of your components, both registered and unregistered. From here, you can:\n\nRegister components: toggle components on to register them with Builder.\nView and edit registered components: Interact with your registered components directly from the Devtools UI. You can rename, register, and edit inputs.\nVisualize content: Display content that's in Builder and click on an overlay to jump into any Builder element directly in the Visual Editor.\n\nTo register your components with Builder:\n\nOpen the Devtools drawer by clicking on the Builder logo on the bottom right.\nClick Components to display all of the components, registered or not, in your code base.\nSelect a component.\nToggle on to register the component. The code to register the component is added automatically to your code.\n\nThe next video shows this process by registering a Counter component:\n\nThe next video shows registering a component and editing its name in Devtools. At the end of the video, notice that the Devtools edit that changes the component's name from Footer to MyFooter, updates in the code editor.\n\nTip: When registering components, Devtools can recognize most input types; however, more complex types require manual coding. If you want to add lists and objects, read about them in Input Types in Builder.\n\nShare your feedback\n\nDevtools is under active development, and we'd love to know what you think. Your feedback helps us meet the real world needs of Builder's community and we couldn't do it without you!\n\nWhat's next\n\nFor more detailed information on registering custom components in Builder, read Integrating Custom Components."
  },
  {
    "title": "Builder.io docs - Builder.io",
    "url": "https://www.builder.io/c/docs/intro",
    "html": "Builder Knowledge Base\n\n⌘K\n\nGetting Started with Builder\n\nLearn your way around the Visual Editor while building a stunning landing page\n\nGo to the Developer Docs\n\nLearn how to integrate Builder with your code base and unlock your team's potential\n\nVisual Editor Tutorials\n\nFor tutorials and guides on creating Pages, Sections, and using data in Builder's Visual Editor, check out Start Building."
  },
  {
    "title": "Builder.io developer docs - Builder.io",
    "url": "https://www.builder.io/c/docs/developers",
    "html": "LET'S BUILD TOGETHER\n\nDeveloping with Builder\n\nGet building with Builder's Visual Headless CMS!\n\nAutomatic Integration with Devtools\n\nINTEGRATE WITH YOUR CODE\n\nIntegrate Page Building\n\nIntegrate Section Building\n\nIntegrate Structured Data\n\nWhich should I use?\nBuilder Blueprints\n\nBlueprints are quick references for common use cases with Builder.\n\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nRequest a Blueprint\n\nDIVE DEEPER\n\nIntegrate Custom Components\n\nLearn About Content Models\n\nExtend Builder with Plugins\n\nEXPLORE THE BUILDER PLAYGROUND:\n\nExplore a Builder Integration in Your Browser\n\nPOPULAR DEVELOPER DOCS\n\nHow Builder Works: Technical Overview\n\nAPI Documentation\n\nGenerating Code with Visual Copilot\n\nIntegrate Symbols\n\nWe ❤️ open source\n\nBuilder\n\nBuilder SDKs, plugins, examples, and more\n\nQwik\n\nResumable framework for building instant-on web apps with great time-to-interactive\n\nMitosis\n\nUniversal components compiler. Write components once, run everywhere.\n\nPartytown\n\nRelocate resource intensive 3rd - party scripts off the main thread and into a web worker.\n\nFigma / HTML\n\nConvert Figma designs to HTML, CSS, React, Vue and more!"
  }
]